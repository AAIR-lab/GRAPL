
(define (domain domain-t1)
(:requirements :typing :strips :probabilistic-effects :disjunctive-preconditions :conditional-effects :negative-preconditions :equality)
(:types blocks)
(:predicates (clear ?v0 - blocks) (on-table ?v0 - blocks) (arm-empty) (holding ?v0 - blocks) (on ?v0 - blocks ?v1 - blocks))


	(:action pickup
		:parameters (?ob - blocks)
		:precondition 
			(and (clear ?ob)
			(on-table ?ob)
			(arm-empty))
		:effect (and  (not (arm-empty)) (not (clear ?ob)) (not (on-table ?ob)) (holding ?ob) (probabilistic 1.000000 (and
			)))
	)


	(:action putdown
		:parameters (?ob - blocks)
		:precondition 
			(and (holding ?ob))
		:effect (and  (not (holding ?ob)) (arm-empty) (clear ?ob) (on-table ?ob) (probabilistic 1.000000 (and
			)))
	)


	(:action stack
		:parameters (?ob - blocks ?underob - blocks)
		:precondition 
			(and (clear ?underob)
			(holding ?ob))
		:effect (and  (not (holding ?ob)) (arm-empty) (clear ?ob) (probabilistic 0.800000 (and
			(not (clear ?underob))
			(on ?ob ?underob)) 0.200000 (and
			(on-table ?ob))))
	)


	(:action unstack
		:parameters (?ob - blocks ?underob - blocks)
		:precondition 
			(and (clear ?ob)
			(arm-empty)
			(not (on ?ob ?underob)))
		:effect (and  (not (arm-empty)) (not (clear ?ob)) (clear ?underob) (holding ?ob) (on ?ob ?underob) (probabilistic 1.000000 (and
			)))
	)
)
(define (problem task-t1) (:domain domain-t1)
  (:objects
        obj0-o - blocks
	obj1-o - blocks
	obj2-o - blocks
	obj3-o - blocks
  )
  (:init 
	(arm-empty)
	(clear obj0-o)
	(clear obj1-o)
	(clear obj2-o)
	(clear obj3-o)
	(holding obj0-o)
	(holding obj1-o)
	(holding obj2-o)
	(holding obj3-o)
	(on-table obj0-o)
	(on-table obj1-o)
	(on-table obj2-o)
	(on-table obj3-o)
  )
  (:goal (and
	(on-table obj0-o)
	(clear obj3-o)
	(not (holding obj1-o))
	(holding obj0-o)
	(on-table obj2-o)
	(on obj1-o obj0-o)
	(clear obj1-o)
	(on obj2-o obj3-o)
	(not (on-table obj1-o))
	(on obj2-o obj1-o)
	(on-table obj3-o)
	(not (holding obj2-o))
	(not (clear obj0-o))
	(not (holding obj3-o))
	(clear obj2-o)
	(arm-empty)))
)
