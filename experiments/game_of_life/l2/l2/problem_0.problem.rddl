non-fluents nf_problem_0 {
	domain = game_of_life_mdp;
	objects {
		x_pos : {x1,x2,x3,x4};
		y_pos : {y1,y2,y3,y4};
	};
	non-fluents {
		NOISE-PROB(x1,y1) = 0.11134431;
		NEIGHBOR(x1,y1,x1,y2);
		NEIGHBOR(x1,y1,x2,y1);
		NEIGHBOR(x1,y1,x2,y2);
		NOISE-PROB(x1,y2) = 0.114498794;
		NEIGHBOR(x1,y2,x1,y1);
		NEIGHBOR(x1,y2,x1,y3);
		NEIGHBOR(x1,y2,x2,y1);
		NEIGHBOR(x1,y2,x2,y2);
		NEIGHBOR(x1,y2,x2,y3);
		NOISE-PROB(x1,y3) = 0.08584072;
		NEIGHBOR(x1,y3,x1,y2);
		NEIGHBOR(x1,y3,x1,y4);
		NEIGHBOR(x1,y3,x2,y2);
		NEIGHBOR(x1,y3,x2,y3);
		NEIGHBOR(x1,y3,x2,y4);
		NOISE-PROB(x1,y4) = 0.050556354;
		NEIGHBOR(x1,y4,x1,y3);
		NEIGHBOR(x1,y4,x2,y3);
		NEIGHBOR(x1,y4,x2,y4);
		NOISE-PROB(x2,y1) = 0.10731221;
		NEIGHBOR(x2,y1,x1,y1);
		NEIGHBOR(x2,y1,x1,y2);
		NEIGHBOR(x2,y1,x2,y2);
		NEIGHBOR(x2,y1,x3,y1);
		NEIGHBOR(x2,y1,x3,y2);
		NOISE-PROB(x2,y2) = 0.11140991;
		NEIGHBOR(x2,y2,x1,y1);
		NEIGHBOR(x2,y2,x1,y2);
		NEIGHBOR(x2,y2,x1,y3);
		NEIGHBOR(x2,y2,x2,y1);
		NEIGHBOR(x2,y2,x2,y3);
		NEIGHBOR(x2,y2,x3,y1);
		NEIGHBOR(x2,y2,x3,y2);
		NEIGHBOR(x2,y2,x3,y3);
		NOISE-PROB(x2,y3) = 0.122623935;
		NEIGHBOR(x2,y3,x1,y2);
		NEIGHBOR(x2,y3,x1,y3);
		NEIGHBOR(x2,y3,x1,y4);
		NEIGHBOR(x2,y3,x2,y2);
		NEIGHBOR(x2,y3,x2,y4);
		NEIGHBOR(x2,y3,x3,y2);
		NEIGHBOR(x2,y3,x3,y3);
		NEIGHBOR(x2,y3,x3,y4);
		NOISE-PROB(x2,y4) = 0.08630614;
		NEIGHBOR(x2,y4,x1,y3);
		NEIGHBOR(x2,y4,x1,y4);
		NEIGHBOR(x2,y4,x2,y3);
		NEIGHBOR(x2,y4,x3,y3);
		NEIGHBOR(x2,y4,x3,y4);
		NOISE-PROB(x3,y1) = 0.07088844;
		NEIGHBOR(x3,y1,x2,y1);
		NEIGHBOR(x3,y1,x2,y2);
		NEIGHBOR(x3,y1,x3,y2);
		NEIGHBOR(x3,y1,x4,y1);
		NEIGHBOR(x3,y1,x4,y2);
		NOISE-PROB(x3,y2) = 0.087265134;
		NEIGHBOR(x3,y2,x2,y1);
		NEIGHBOR(x3,y2,x2,y2);
		NEIGHBOR(x3,y2,x2,y3);
		NEIGHBOR(x3,y2,x3,y1);
		NEIGHBOR(x3,y2,x3,y3);
		NEIGHBOR(x3,y2,x4,y1);
		NEIGHBOR(x3,y2,x4,y2);
		NEIGHBOR(x3,y2,x4,y3);
		NOISE-PROB(x3,y3) = 0.06333681;
		NEIGHBOR(x3,y3,x2,y2);
		NEIGHBOR(x3,y3,x2,y3);
		NEIGHBOR(x3,y3,x2,y4);
		NEIGHBOR(x3,y3,x3,y2);
		NEIGHBOR(x3,y3,x3,y4);
		NEIGHBOR(x3,y3,x4,y2);
		NEIGHBOR(x3,y3,x4,y3);
		NEIGHBOR(x3,y3,x4,y4);
		NOISE-PROB(x3,y4) = 0.1969719;
		NEIGHBOR(x3,y4,x2,y3);
		NEIGHBOR(x3,y4,x2,y4);
		NEIGHBOR(x3,y4,x3,y3);
		NEIGHBOR(x3,y4,x4,y3);
		NEIGHBOR(x3,y4,x4,y4);
		NOISE-PROB(x4,y1) = 0.15398386;
		NEIGHBOR(x4,y1,x3,y1);
		NEIGHBOR(x4,y1,x3,y2);
		NEIGHBOR(x4,y1,x4,y2);
		NOISE-PROB(x4,y2) = 0.17134218;
		NEIGHBOR(x4,y2,x3,y1);
		NEIGHBOR(x4,y2,x3,y2);
		NEIGHBOR(x4,y2,x3,y3);
		NEIGHBOR(x4,y2,x4,y1);
		NEIGHBOR(x4,y2,x4,y3);
		NOISE-PROB(x4,y3) = 0.10651215;
		NEIGHBOR(x4,y3,x3,y2);
		NEIGHBOR(x4,y3,x3,y3);
		NEIGHBOR(x4,y3,x3,y4);
		NEIGHBOR(x4,y3,x4,y2);
		NEIGHBOR(x4,y3,x4,y4);
		NOISE-PROB(x4,y4) = 0.15005976;
		NEIGHBOR(x4,y4,x3,y3);
		NEIGHBOR(x4,y4,x3,y4);
		NEIGHBOR(x4,y4,x4,y3);
	};
}

instance problem_0 {
	domain = game_of_life_mdp;
	non-fluents = nf_problem_0;
	init-state {
		alive(x1,y1);
		alive(x1,y3);
		alive(x1,y4);
		alive(x2,y1);
		alive(x2,y4);
		alive(x3,y2);
		alive(x3,y3);
		alive(x3,y4);
	};

	max-nondef-actions = 1;
	horizon  = 40;
	discount = 0.9;
}
