(define (domain prob_domain) 
 (:requirements :strips :probabilistic-effects :conditional-effects) 
 (:constants WR TR YJ FJ DN JQ OK ED CI KG )
 (:predicates 
	 (XG ?X ?Y ) 
	 (WI ?X ?Y ) 
	 (LS ?X ) 
	 (QG ?X ) 
	 (GO ?X ) 
(clear)
(not-clear)
 )
(:action KZH
 :parameters (?X ?Y )
 :precondition (and 
		 (WI ?X ?X) 
  )
 :effect (probabilistic 
		 87/100 (and (XG ?Y ?X) (QG ?X) )  
		 13/100 (and (not (WI ?X ?X)) (WI ?Y ?Y) (WI ?Y ?X) )  
          )
 )
(:action MMF
 :parameters (?X ?Y ?Z )
 :precondition (and 
		 (XG ?X ?X) 
  )
 :effect (probabilistic 
		 100/100 (and (QG ?Z) (LS ?Y) (WI ?Y ?Z) )  
          )
 )
(:action VLC
 :parameters (?X ?Y )
 :precondition (and 
		 (LS ?X) 
		 (WI ?Y ?X) 
  )
 :effect (probabilistic 
		 100/100 (and (XG ?X ?X) )  
          )
 )
(:action EQI
 :parameters (?X ?Y )
 :precondition (and 
		 (LS ?Y) 
		 (XG ?X ?X) 
  )
 :effect (probabilistic 
		 24/100 (and (not (LS ?Y)) (WI ?Y ?Y) (not (XG ?X ?X)) )  
		 31/100 (and (XG ?Y ?X) (not (LS ?Y)) (WI ?X ?X) )  
		 45/100 (and (GO ?X) (WI ?X ?Y) (XG ?Y ?Y) )  
          )
 )
(:action RMJ
 :parameters (?X )
 :precondition (and 
		 (QG ?X) 
		 (XG ?X ?X) 
  )
 :effect (probabilistic 
		 100/100 (and (GO ?X) )  
          )
 )
(:action reset1 
 :precondition (not-clear)
 :effect (and 
	     (forall (?x) (and 
      (not (XG ?x WR)) 
      (not (XG ?x TR)) 
      (not (XG ?x YJ)) 
      (not (XG ?x FJ)) 
      (not (XG ?x DN)) 
      (not (XG ?x JQ)) 
      (not (XG ?x OK)) 
      (not (XG ?x ED)) 
      (not (XG ?x CI)) 
      (not (XG ?x KG)) 
      (not (WI ?x WR)) 
      (not (WI ?x TR)) 
      (not (WI ?x YJ)) 
      (not (WI ?x FJ)) 
      (not (WI ?x DN)) 
      (not (WI ?x JQ)) 
      (not (WI ?x OK)) 
      (not (WI ?x ED)) 
      (not (WI ?x CI)) 
      (not (WI ?x KG)) 
      (not (LS ?x)) 
      (not (QG ?x)) 
      (not (GO ?x)) 
))
(not (not-clear))
(clear)))

(:action reset2 
 :precondition (clear) 
 :effect (and (not-clear)
              (not (clear))
(GO YJ) 
(WI DN TR) 
(QG WR) 
(QG KG) 
(WI OK KG) 
(LS TR) 
(XG ED KG) 
(QG YJ) 
(GO ED) 
(LS JQ) 
(LS WR) 
(QG OK) 
(XG KG OK) 
(LS ED) 
(QG CI) 
(XG FJ YJ) 
(XG TR CI) 
(LS DN) 
(XG TR DN) 
(WI OK DN) 
)))
(define (problem random-problem830) 
 (:domain prob_domain) 
 (:init 
(not-clear)
(GO YJ) (WI DN TR) (QG WR) (QG KG) (WI OK KG) (LS TR) (XG ED KG) (QG YJ) (GO ED) (LS JQ) (LS WR) (QG OK) (XG KG OK) (LS ED) (QG CI) (XG FJ YJ) (XG TR CI) (LS DN) (XG TR DN) (WI OK DN)  
)
 (:goal (and 
(QG TR ) 
(GO TR ) 
)))
