(define (domain prob_domain) 
 (:requirements :strips :probabilistic-effects :conditional-effects) 
 (:constants EU PL SV VF NT HT ZT VO JO SD )
 (:predicates 
	 (PZ ?X ) 
	 (ZE ?X ?Y ) 
	 (FZ ?X ?Y ) 
	 (BD ?X ?Y ) 
	 (OL ?X ) 
(clear)
(not-clear)
 )
(:action FED
 :parameters (?X ?Y )
 :precondition (and 
		 (FZ ?Y ?Y) 
		 (FZ ?Y ?X) 
		 (BD ?X ?Y) 
		 (PZ ?X) 
  )
 :effect (probabilistic 
		 22/100 (and (not (FZ ?Y ?Y)) (OL ?X) )  
		 78/100 (and (not (BD ?X ?Y)) (not (PZ ?X)) (OL ?X) (ZE ?X ?Y) )  
          )
 )
(:action WFG
 :parameters (?X ?Y )
 :precondition (and 
		 (OL ?Y) 
  )
 :effect (probabilistic 
		 100/100 (and (BD ?X ?Y) (FZ ?X ?Y) )  
          )
 )
(:action COO
 :parameters (?X ?Y )
 :precondition (and 
		 (OL ?Y) 
  )
 :effect (probabilistic 
		 100/100 (and (PZ ?X) )  
          )
 )
(:action YUS
 :parameters (?X ?Y ?Z )
 :precondition (and 
		 (OL ?Y) 
		 (BD ?Z ?Z) 
		 (PZ ?Z) 
		 (FZ ?Y ?Z) 
  )
 :effect (probabilistic 
		 54/100 (and (ZE ?Z ?Y) )  
		 36/100 (and (FZ ?Z ?X) (OL ?Z) (BD ?Z ?Y) )  
		 10/100 (and (not (FZ ?Y ?Z)) )  
          )
 )
(:action KDC
 :parameters (?X ?Y )
 :precondition (and 
		 (PZ ?Y) 
		 (FZ ?X ?Y) 
  )
 :effect (probabilistic 
		 100/100 (and (BD ?X ?X) (ZE ?X ?Y) )  
          )
 )
(:action reset1 
 :precondition (not-clear)
 :effect (and 
	     (forall (?x) (and 
      (not (PZ ?x)) 
      (not (ZE ?x EU)) 
      (not (ZE ?x PL)) 
      (not (ZE ?x SV)) 
      (not (ZE ?x VF)) 
      (not (ZE ?x NT)) 
      (not (ZE ?x HT)) 
      (not (ZE ?x ZT)) 
      (not (ZE ?x VO)) 
      (not (ZE ?x JO)) 
      (not (ZE ?x SD)) 
      (not (FZ ?x EU)) 
      (not (FZ ?x PL)) 
      (not (FZ ?x SV)) 
      (not (FZ ?x VF)) 
      (not (FZ ?x NT)) 
      (not (FZ ?x HT)) 
      (not (FZ ?x ZT)) 
      (not (FZ ?x VO)) 
      (not (FZ ?x JO)) 
      (not (FZ ?x SD)) 
      (not (BD ?x EU)) 
      (not (BD ?x PL)) 
      (not (BD ?x SV)) 
      (not (BD ?x VF)) 
      (not (BD ?x NT)) 
      (not (BD ?x HT)) 
      (not (BD ?x ZT)) 
      (not (BD ?x VO)) 
      (not (BD ?x JO)) 
      (not (BD ?x SD)) 
      (not (OL ?x)) 
))
(not (not-clear))
(clear)))

(:action reset2 
 :precondition (clear) 
 :effect (and (not-clear)
              (not (clear))
(PZ HT) 
(PZ JO) 
(ZE VF PL) 
(BD HT VF) 
(PZ SV) 
(FZ JO ZT) 
(PZ VF) 
(OL JO) 
(FZ SV VF) 
(OL VF) 
(OL NT) 
(BD NT PL) 
(BD NT VO) 
(BD ZT SV) 
(ZE SD VO) 
(BD ZT JO) 
(FZ ZT NT) 
(BD SD VF) 
(FZ ZT PL) 
(ZE SV PL) 
)))
(define (problem random-problem598) 
 (:domain prob_domain) 
 (:init 
(not-clear)
(PZ HT) (PZ JO) (ZE VF PL) (BD HT VF) (PZ SV) (FZ JO ZT) (PZ VF) (OL JO) (FZ SV VF) (OL VF) (OL NT) (BD NT PL) (BD NT VO) (BD ZT SV) (ZE SD VO) (BD ZT JO) (FZ ZT NT) (BD SD VF) (FZ ZT PL) (ZE SV PL)  
)
 (:goal (and 
(BD PL  JO ) 
(BD VO  NT ) 
(BD SV  VF ) 
(BD EU  VF ) 
(BD VF  JO ) 
(BD EU  NT ) 
(BD EU  JO ) 
(BD SD  SD ) 
(BD HT  NT ) 
(BD VO  VF ) 
(BD EU  EU ) 
(BD PL  VF ) 
(BD VF  VF ) 
(BD PL  PL ) 
(BD SD  JO ) 
(BD SV  NT ) 
)))
