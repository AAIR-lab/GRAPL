(define (domain prob_domain) 
 (:requirements :strips :probabilistic-effects :conditional-effects) 
 (:constants ZW QJ PA OX TA RO GC EZ RQ YX )
 (:predicates 
	 (LB ?X ) 
	 (EM ?X ?Y ) 
	 (WE ?X ) 
	 (KR ?X ) 
	 (VF ?X ?Y ) 
(clear)
(not-clear)
 )
(:action JJX
 :parameters (?X ?Y ?Z )
 :precondition (and 
		 (LB ?Z) 
		 (WE ?Z) 
		 (WE ?X) 
  )
 :effect (probabilistic 
		 100/100 (and (EM ?Y ?Y) )  
          )
 )
(:action ECA
 :parameters (?X ?Y ?Z )
 :precondition (and 
		 (VF ?Z ?Z) 
		 (WE ?X) 
		 (EM ?Y ?Z) 
		 (WE ?Z) 
  )
 :effect (probabilistic 
		 36/100 (and (LB ?Y) (VF ?Y ?Z) (VF ?X ?Y) (not (VF ?Z ?Z)) (VF ?X ?X) )  
		 64/100 (and (not (VF ?Z ?Z)) (KR ?Z) )  
          )
 )
(:action FMN
 :parameters (?X ?Y ?Z )
 :precondition (and 
		 (LB ?Z) 
		 (LB ?Y) 
		 (WE ?X) 
  )
 :effect (probabilistic 
		 100/100 (and (VF ?Z ?Y) (KR ?Y) (KR ?Z) (VF ?X ?Z) (LB ?X) )  
          )
 )
(:action AIV
 :parameters (?X ?Y )
 :precondition (and 
		 (EM ?Y ?X) 
  )
 :effect (probabilistic 
		 30/100 (and (WE ?X) (not (EM ?Y ?X)) (LB ?Y) (LB ?X) (EM ?X ?X) )  
		 50/100 (and (EM ?Y ?Y) (VF ?Y ?Y) (KR ?X) (not (EM ?Y ?X)) (LB ?X) )  
		 20/100 (and (EM ?X ?X) )  
          )
 )
(:action NDS
 :parameters (?X ?Y ?Z )
 :precondition (and 
		 (VF ?Z ?X) 
		 (KR ?X) 
		 (EM ?Y ?X) 
  )
 :effect (probabilistic 
		 100/100 (and (KR ?Z) (not (KR ?X)) (not (EM ?Y ?X)) (KR ?Y) )  
          )
 )
(:action reset1 
 :precondition (not-clear)
 :effect (and 
	     (forall (?x) (and 
      (not (LB ?x)) 
      (not (EM ?x ZW)) 
      (not (EM ?x QJ)) 
      (not (EM ?x PA)) 
      (not (EM ?x OX)) 
      (not (EM ?x TA)) 
      (not (EM ?x RO)) 
      (not (EM ?x GC)) 
      (not (EM ?x EZ)) 
      (not (EM ?x RQ)) 
      (not (EM ?x YX)) 
      (not (WE ?x)) 
      (not (KR ?x)) 
      (not (VF ?x ZW)) 
      (not (VF ?x QJ)) 
      (not (VF ?x PA)) 
      (not (VF ?x OX)) 
      (not (VF ?x TA)) 
      (not (VF ?x RO)) 
      (not (VF ?x GC)) 
      (not (VF ?x EZ)) 
      (not (VF ?x RQ)) 
      (not (VF ?x YX)) 
))
(not (not-clear))
(clear)))

(:action reset2 
 :precondition (clear) 
 :effect (and (not-clear)
              (not (clear))
(KR OX) 
(VF ZW ZW) 
(WE PA) 
(LB TA) 
(EM QJ OX) 
(WE RQ) 
(KR RQ) 
(WE EZ) 
(VF EZ PA) 
(EM QJ YX) 
(WE ZW) 
(EM YX YX) 
(VF OX ZW) 
(EM OX RQ) 
(KR ZW) 
(VF QJ TA) 
(WE OX) 
(KR TA) 
(WE RO) 
(WE QJ) 
)))
(define (problem random-problem180) 
 (:domain prob_domain) 
 (:init 
(not-clear)
(KR OX) (VF ZW ZW) (WE PA) (LB TA) (EM QJ OX) (WE RQ) (KR RQ) (WE EZ) (VF EZ PA) (EM QJ YX) (WE ZW) (EM YX YX) (VF OX ZW) (EM OX RQ) (KR ZW) (VF QJ TA) (WE OX) (KR TA) (WE RO) (WE QJ)  
)
 (:goal (and 
(VF YX  YX ) 
(KR YX ) 
(VF RO  YX ) 
(KR QJ ) 
(VF ZW  QJ ) 
(VF RO  QJ ) 
(KR RO ) 
(VF RQ  RO ) 
(VF YX  TA ) 
(VF OX  YX ) 
(VF EZ  OX ) 
(VF TA  QJ ) 
(VF OX  TA ) 
(VF RQ  QJ ) 
(VF RO  RQ ) 
(VF EZ  RO ) 
(VF TA  YX ) 
(VF EZ  TA ) 
(VF ZW  OX ) 
(VF YX  OX ) 
(VF RQ  YX ) 
(VF RO  EZ ) 
(KR EZ ) 
(VF QJ  RO ) 
(VF OX  OX ) 
)))
