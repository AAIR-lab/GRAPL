
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Jan 16 15:44:04 CET 2018
//----------------------------------------------------

package rddl.parser;

import rddl.RDDL;
import java_cup.runtime.*;
import java.io.*;
import java.util.*;

/** CUP v0.10k generated parser.
  * @version Tue Jan 16 15:44:04 CET 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\346\000\002\002\004\000\002\003\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\004\010\000\002\004\007\000" +
    "\002\010\010\000\002\010\007\000\002\010\007\000\002" +
    "\010\006\000\002\005\004\000\002\005\004\000\002\005" +
    "\004\000\002\005\004\000\002\005\004\000\002\005\004" +
    "\000\002\005\004\000\002\005\004\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\046\007\000\002\011\007\000\002\013\003" +
    "\000\002\013\004\000\002\022\006\000\002\022\006\000" +
    "\002\022\010\000\002\022\013\000\002\022\015\000\002" +
    "\022\010\000\002\020\005\000\002\020\007\000\002\051" +
    "\003\000\002\051\005\000\002\012\003\000\002\012\005" +
    "\000\002\052\003\000\002\052\003\000\002\052\003\000" +
    "\002\052\003\000\002\052\004\000\002\052\003\000\002" +
    "\052\005\000\002\052\007\000\002\052\007\000\002\014" +
    "\005\000\002\014\003\000\002\015\005\000\002\015\007" +
    "\000\002\053\003\000\002\053\003\000\002\057\003\000" +
    "\002\057\004\000\002\057\003\000\002\057\003\000\002" +
    "\054\003\000\002\054\004\000\002\055\003\000\002\055" +
    "\003\000\002\056\005\000\002\056\010\000\002\016\003" +
    "\000\002\016\006\000\002\017\003\000\002\017\005\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\023\007\000\002\024\003\000\002\024" +
    "\004\000\002\025\016\000\002\025\016\000\002\025\016" +
    "\000\002\025\016\000\002\025\012\000\002\025\012\000" +
    "\002\025\012\000\002\025\016\000\002\026\007\000\002" +
    "\060\003\000\002\060\003\000\002\027\003\000\002\027" +
    "\004\000\002\031\006\000\002\032\006\000\002\033\007" +
    "\000\002\033\006\000\002\034\003\000\002\034\004\000" +
    "\002\035\004\000\002\036\007\000\002\036\006\000\002" +
    "\037\003\000\002\037\004\000\002\040\004\000\002\041" +
    "\007\000\002\041\006\000\002\042\003\000\002\042\004" +
    "\000\002\043\004\000\002\045\003\000\002\045\004\000" +
    "\002\050\010\000\002\063\003\000\002\063\004\000\002" +
    "\064\007\000\002\064\004\000\002\064\010\000\002\064" +
    "\005\000\002\064\011\000\002\064\006\000\002\044\003" +
    "\000\002\044\005\000\002\044\004\000\002\044\006\000" +
    "\002\065\003\000\002\065\005\000\002\066\003\000\002" +
    "\066\004\000\002\066\003\000\002\070\003\000\002\070" +
    "\003\000\002\070\003\000\002\070\004\000\002\061\006" +
    "\000\002\061\007\000\002\061\003\000\002\061\004\000" +
    "\002\061\005\000\002\071\003\000\002\071\005\000\002" +
    "\071\005\000\002\071\003\000\002\071\004\000\002\047" +
    "\004\000\002\047\005\000\002\067\003\000\002\067\005" +
    "\000\002\030\006\000\002\030\007\000\002\072\003\000" +
    "\002\072\005\000\002\073\005\000\002\074\005\000\002" +
    "\074\005\000\002\074\007\000\002\077\003\000\002\077" +
    "\005\000\002\075\003\000\002\075\005\000\002\076\006" +
    "\000\002\076\005\000\002\062\003\000\002\062\003\000" +
    "\002\062\003\000\002\062\004\000\002\062\004\000\002" +
    "\062\005\000\002\062\005\000\002\062\006\000\002\062" +
    "\003\000\002\062\003\000\002\062\005\000\002\062\005" +
    "\000\002\062\005\000\002\062\005\000\002\062\005\000" +
    "\002\062\005\000\002\062\004\000\002\062\005\000\002" +
    "\062\005\000\002\062\005\000\002\062\005\000\002\062" +
    "\005\000\002\062\010\000\002\062\010\000\002\062\003" +
    "\000\002\062\003\000\002\062\004\000\002\062\004\000" +
    "\002\062\005\000\002\062\005\000\002\062\005\000\002" +
    "\062\005\000\002\062\010\000\002\062\012\000\002\062" +
    "\011\000\002\062\006\000\002\062\006\000\002\062\006" +
    "\000\002\062\010\000\002\062\010\000\002\062\006\000" +
    "\002\062\010\000\002\062\012\000\002\062\010\000\002" +
    "\062\006\000\002\062\010\000\002\062\010\000\002\007" +
    "\024\000\002\007\015\000\002\006\042\000\002\006\036" +
    "\000\002\006\035\000\002\006\031\000\002\006\035\000" +
    "\002\006\031\000\002\006\030\000\002\006\024\000\002" +
    "\006\036\000\002\006\032\000\002\006\031\000\002\006" +
    "\025\000\002\006\031\000\002\006\025\000\002\006\024" +
    "\000\002\006\020\000\002\006\037\000\002\006\041" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u02f9\000\010\004\007\005\011\030\005\001\002\000" +
    "\012\002\ufffd\004\007\005\011\030\005\001\002\000\004" +
    "\126\u02e6\001\002\000\012\002\ufffb\004\007\005\011\030" +
    "\005\001\002\000\004\126\u020e\001\002\000\004\002\u020d" +
    "\001\002\000\004\126\014\001\002\000\012\002\ufffc\004" +
    "\007\005\011\030\005\001\002\000\004\002\uffff\001\002" +
    "\000\004\013\015\001\002\000\004\004\016\001\002\000" +
    "\004\116\017\001\002\000\004\126\020\001\002\000\004" +
    "\100\021\001\002\000\014\006\026\010\024\011\027\025" +
    "\022\030\025\001\002\000\004\116\u0203\001\002\000\004" +
    "\100\u01fd\001\002\000\004\013\u01b6\001\002\000\004\116" +
    "\u014d\001\002\000\004\116\162\001\002\000\004\013\030" +
    "\001\002\000\006\047\031\126\033\001\002\000\004\126" +
    "\154\001\002\000\012\014\uff8f\047\031\100\uff8f\126\033" +
    "\001\002\000\010\100\063\101\065\116\064\001\002\000" +
    "\004\014\035\001\002\000\004\100\036\001\002\000\006" +
    "\006\026\025\037\001\002\000\004\116\047\001\002\000" +
    "\004\100\041\001\002\000\004\007\042\001\002\000\004" +
    "\116\043\001\002\000\004\125\044\001\002\000\004\100" +
    "\045\001\002\000\004\014\046\001\002\000\012\002\uff22" +
    "\004\uff22\005\uff22\030\uff22\001\002\000\006\024\051\124" +
    "\050\001\002\000\004\100\uffbf\001\002\000\004\100\uffbe" +
    "\001\002\000\004\100\053\001\002\000\004\006\026\001" +
    "\002\000\004\100\055\001\002\000\004\007\056\001\002" +
    "\000\004\116\057\001\002\000\004\125\060\001\002\000" +
    "\004\100\061\001\002\000\004\014\062\001\002\000\012" +
    "\002\uff2a\004\uff2a\005\uff2a\030\uff2a\001\002\000\012\014" +
    "\uff8c\047\uff8c\100\uff8c\126\uff8c\001\002\000\034\023\106" +
    "\024\112\042\103\063\101\101\120\104\116\110\115\120" +
    "\111\121\114\124\102\125\113\126\104\137\107\001\002" +
    "\000\010\042\072\126\070\137\071\001\002\000\004\102" +
    "\076\001\002\000\006\102\uff83\103\074\001\002\000\010" +
    "\102\uff81\103\uff81\105\uff81\001\002\000\010\102\uff7f\103" +
    "\uff7f\105\uff7f\001\002\000\004\126\073\001\002\000\010" +
    "\102\uff80\103\uff80\105\uff80\001\002\000\010\042\072\126" +
    "\070\137\071\001\002\000\004\102\uff82\001\002\000\006" +
    "\100\077\116\100\001\002\000\012\014\uff8d\047\uff8d\100" +
    "\uff8d\126\uff8d\001\002\000\034\023\106\024\112\042\103" +
    "\063\101\101\120\104\116\110\115\120\111\121\114\124" +
    "\102\125\113\126\104\137\107\001\002\000\006\124\147" +
    "\125\150\001\002\000\012\014\uffc1\100\uffc1\103\uffc1\112" +
    "\uffc1\001\002\000\004\126\146\001\002\000\012\014\uffd1" +
    "\100\uffd1\103\uffd1\112\uffd1\001\002\000\012\014\uffd2\100" +
    "\uffd2\103\uffd2\112\uffd2\001\002\000\012\014\uffc2\100\uffc2" +
    "\103\uffc2\112\uffc2\001\002\000\012\014\uffcf\100\uffcf\103" +
    "\uffcf\112\uffcf\001\002\000\012\014\uffd3\100\uffd3\103\uffd3" +
    "\112\uffd3\001\002\000\012\014\uffc7\100\uffc7\103\uffc7\112" +
    "\uffc7\001\002\000\012\014\uffc3\100\uffc3\103\uffc3\112\uffc3" +
    "\001\002\000\012\014\uffc5\100\uffc5\103\uffc5\112\uffc5\001" +
    "\002\000\012\014\uffc6\100\uffc6\103\uffc6\112\uffc6\001\002" +
    "\000\012\042\072\106\126\126\070\137\071\001\002\000" +
    "\004\110\140\001\002\000\004\100\137\001\002\000\004" +
    "\110\122\001\002\000\012\014\uffd4\100\uffd4\103\uffd4\112" +
    "\uffd4\001\002\000\012\042\072\106\126\126\070\137\071" +
    "\001\002\000\004\112\uffca\001\002\000\004\105\133\001" +
    "\002\000\004\112\131\001\002\000\004\105\127\001\002" +
    "\000\034\023\106\024\112\042\103\063\101\101\120\104" +
    "\116\110\115\120\111\121\114\124\102\125\113\126\104" +
    "\137\107\001\002\000\004\112\uffcb\001\002\000\004\102" +
    "\132\001\002\000\012\014\uffcd\100\uffcd\103\uffcd\112\uffcd" +
    "\001\002\000\034\023\106\024\112\042\103\063\101\101" +
    "\120\104\116\110\115\120\111\121\114\124\102\125\113" +
    "\126\104\137\107\001\002\000\006\103\135\112\uffc9\001" +
    "\002\000\010\042\072\126\070\137\071\001\002\000\004" +
    "\112\uffc8\001\002\000\012\014\uff89\047\uff89\100\uff89\126" +
    "\uff89\001\002\000\012\042\072\106\126\126\070\137\071" +
    "\001\002\000\004\112\142\001\002\000\004\107\143\001" +
    "\002\000\012\014\uffcc\100\uffcc\103\uffcc\112\uffcc\001\002" +
    "\000\004\112\145\001\002\000\012\014\uffce\100\uffce\103" +
    "\uffce\112\uffce\001\002\000\012\014\uffd0\100\uffd0\103\uffd0" +
    "\112\uffd0\001\002\000\012\014\uffc0\100\uffc0\103\uffc0\112" +
    "\uffc0\001\002\000\012\014\uffc4\100\uffc4\103\uffc4\112\uffc4" +
    "\001\002\000\004\100\152\001\002\000\012\014\uff88\047" +
    "\uff88\100\uff88\126\uff88\001\002\000\006\014\uff8e\100\uff8e" +
    "\001\002\000\006\100\155\101\156\001\002\000\012\014" +
    "\uff8a\047\uff8a\100\uff8a\126\uff8a\001\002\000\010\042\072" +
    "\126\070\137\071\001\002\000\004\102\160\001\002\000" +
    "\004\100\161\001\002\000\012\014\uff8b\047\uff8b\100\uff8b" +
    "\126\uff8b\001\002\000\010\024\051\066\163\124\050\001" +
    "\002\000\004\101\165\001\002\000\004\100\uffbd\001\002" +
    "\000\076\041\166\042\217\043\213\047\172\050\171\051" +
    "\201\052\220\053\206\054\207\055\204\056\202\057\215" +
    "\060\170\063\211\064\177\070\176\073\174\074\221\075" +
    "\210\076\205\101\200\104\173\110\223\120\175\121\212" +
    "\124\216\125\225\126\167\127\222\137\224\001\002\000" +
    "\004\016\u0148\001\002\000\064\014\uff78\016\u013d\044\uff78" +
    "\045\uff78\046\uff78\060\uff78\061\uff78\062\uff78\063\uff78\067" +
    "\uff78\071\u011c\100\uff78\101\u011b\102\uff78\103\uff78\104\u013e" +
    "\107\uff78\110\uff78\111\uff78\112\uff78\113\uff78\114\uff78\115" +
    "\uff78\117\uff78\122\uff78\001\002\000\076\041\166\042\217" +
    "\043\213\047\172\050\171\051\201\052\220\053\206\054" +
    "\207\055\204\056\202\057\215\060\170\063\211\064\177" +
    "\070\176\073\174\074\221\075\210\076\205\101\200\104" +
    "\173\110\223\120\175\121\212\124\216\125\225\126\167" +
    "\127\222\137\224\001\002\000\004\101\u0139\001\002\000" +
    "\076\041\166\042\217\043\213\047\172\050\171\051\201" +
    "\052\220\053\206\054\207\055\204\056\202\057\215\060" +
    "\170\063\211\064\177\070\176\073\174\074\221\075\210" +
    "\076\205\101\200\104\173\110\223\120\175\121\212\124" +
    "\216\125\225\126\167\127\222\137\224\001\002\000\076" +
    "\041\166\042\217\043\213\047\172\050\171\051\201\052" +
    "\220\053\206\054\207\055\204\056\202\057\215\060\170" +
    "\063\211\064\177\070\176\073\174\074\221\075\210\076" +
    "\205\101\200\104\173\110\223\120\175\121\212\124\216" +
    "\125\225\126\167\127\222\137\224\001\002\000\004\101" +
    "\u0131\001\002\000\054\014\uff56\044\uff56\045\uff56\046\uff56" +
    "\060\uff56\061\uff56\062\uff56\063\uff56\067\uff56\100\uff56\102" +
    "\uff56\103\uff56\107\uff56\110\uff56\111\uff56\112\uff56\113\uff56" +
    "\114\uff56\115\uff56\117\uff56\122\uff56\001\002\000\004\101" +
    "\u0104\001\002\000\004\101\375\001\002\000\076\041\166" +
    "\042\217\043\213\047\172\050\171\051\201\052\220\053" +
    "\206\054\207\055\204\056\202\057\215\060\170\063\211" +
    "\064\177\070\176\073\174\074\221\075\210\076\205\101" +
    "\200\104\173\110\223\120\175\121\212\124\216\125\225" +
    "\126\167\127\222\137\224\001\002\000\004\101\370\001" +
    "\002\000\004\101\365\001\002\000\042\044\233\045\251" +
    "\046\250\060\241\061\246\062\242\063\232\102\364\110" +
    "\245\111\235\112\253\113\236\114\243\115\234\117\247" +
    "\122\240\001\002\000\004\101\357\001\002\000\004\101" +
    "\352\001\002\000\004\101\347\001\002\000\004\101\342" +
    "\001\002\000\004\101\325\001\002\000\076\041\166\042" +
    "\217\043\213\047\172\050\171\051\201\052\220\053\206" +
    "\054\207\055\204\056\202\057\215\060\170\063\211\064" +
    "\177\070\176\073\174\074\221\075\210\076\205\101\200" +
    "\104\173\110\223\120\175\121\212\124\216\125\225\126" +
    "\167\127\222\137\224\001\002\000\054\014\uff55\044\uff55" +
    "\045\uff55\046\uff55\060\uff55\061\uff55\062\uff55\063\uff55\067" +
    "\uff55\100\uff55\102\uff55\103\uff55\107\uff55\110\uff55\111\uff55" +
    "\112\uff55\113\uff55\114\uff55\115\uff55\117\uff55\122\uff55\001" +
    "\002\000\004\016\311\001\002\000\054\014\uff5d\044\uff5d" +
    "\045\uff5d\046\uff5d\060\uff5d\061\uff5d\062\uff5d\063\uff5d\067" +
    "\uff5d\100\uff5d\102\uff5d\103\uff5d\107\uff5d\110\uff5d\111\uff5d" +
    "\112\uff5d\113\uff5d\114\uff5d\115\uff5d\117\uff5d\122\uff5d\001" +
    "\002\000\004\101\306\001\002\000\054\014\uff46\044\uff46" +
    "\045\uff46\046\uff46\060\uff46\061\uff46\062\uff46\063\uff46\067" +
    "\uff46\100\uff46\102\uff46\103\uff46\107\uff46\110\uff46\111\uff46" +
    "\112\uff46\113\uff46\114\uff46\115\uff46\117\uff46\122\uff46\001" +
    "\002\000\004\126\305\001\002\000\004\101\300\001\002" +
    "\000\004\101\273\001\002\000\054\014\uff5e\044\uff5e\045" +
    "\uff5e\046\uff5e\060\uff5e\061\uff5e\062\uff5e\063\uff5e\067\uff5e" +
    "\100\uff5e\102\uff5e\103\uff5e\107\uff5e\110\uff5e\111\uff5e\112" +
    "\uff5e\113\uff5e\114\uff5e\115\uff5e\117\uff5e\122\uff5e\001\002" +
    "\000\010\042\072\126\070\137\071\001\002\000\054\014" +
    "\uff5c\044\uff5c\045\uff5c\046\uff5c\060\uff5c\061\uff5c\062\uff5c" +
    "\063\uff5c\067\uff5c\100\uff5c\102\uff5c\103\uff5c\107\uff5c\110" +
    "\uff5c\111\uff5c\112\uff5c\113\uff5c\114\uff5c\115\uff5c\117\uff5c" +
    "\122\uff5c\001\002\000\054\014\uff45\044\uff45\045\uff45\046" +
    "\uff45\060\uff45\061\uff45\062\uff45\063\uff45\067\uff45\100\uff45" +
    "\102\uff45\103\uff45\107\uff45\110\uff45\111\uff45\112\uff45\113" +
    "\uff45\114\uff45\115\uff45\117\uff45\122\uff45\001\002\000\054" +
    "\014\uff5a\044\uff5a\045\uff5a\046\uff5a\060\uff5a\061\uff5a\062" +
    "\uff5a\063\uff5a\067\uff5a\100\uff5a\102\uff5a\103\uff5a\107\uff5a" +
    "\110\uff5a\111\uff5a\112\uff5a\113\uff5a\114\uff5a\115\uff5a\117" +
    "\uff5a\122\uff5a\001\002\000\004\105\230\001\002\000\076" +
    "\041\166\042\217\043\213\047\172\050\171\051\201\052" +
    "\220\053\206\054\207\055\204\056\202\057\215\060\170" +
    "\063\211\064\177\070\176\073\174\074\221\075\210\076" +
    "\205\101\200\104\173\110\223\120\175\121\212\124\216" +
    "\125\225\126\167\127\222\137\224\001\002\000\042\044" +
    "\233\045\251\046\250\060\241\061\246\062\242\063\232" +
    "\103\244\110\245\111\235\112\237\113\236\114\243\115" +
    "\234\117\247\122\240\001\002\000\076\041\166\042\217" +
    "\043\213\047\172\050\171\051\201\052\220\053\206\054" +
    "\207\055\204\056\202\057\215\060\170\063\211\064\177" +
    "\070\176\073\174\074\221\075\210\076\205\101\200\104" +
    "\173\110\223\120\175\121\212\124\216\125\225\126\167" +
    "\127\222\137\224\001\002\000\076\041\166\042\217\043" +
    "\213\047\172\050\171\051\201\052\220\053\206\054\207" +
    "\055\204\056\202\057\215\060\170\063\211\064\177\070" +
    "\176\073\174\074\221\075\210\076\205\101\200\104\173" +
    "\110\223\120\175\121\212\124\216\125\225\126\167\127" +
    "\222\137\224\001\002\000\076\041\166\042\217\043\213" +
    "\047\172\050\171\051\201\052\220\053\206\054\207\055" +
    "\204\056\202\057\215\060\170\063\211\064\177\070\176" +
    "\073\174\074\221\075\210\076\205\101\200\104\173\110" +
    "\223\120\175\121\212\124\216\125\225\126\167\127\222" +
    "\137\224\001\002\000\076\041\166\042\217\043\213\047" +
    "\172\050\171\051\201\052\220\053\206\054\207\055\204" +
    "\056\202\057\215\060\170\063\211\064\177\070\176\073" +
    "\174\074\221\075\210\076\205\101\200\104\173\110\223" +
    "\120\175\121\212\124\216\125\225\126\167\127\222\137" +
    "\224\001\002\000\076\041\166\042\217\043\213\047\172" +
    "\050\171\051\201\052\220\053\206\054\207\055\204\056" +
    "\202\057\215\060\170\063\211\064\177\070\176\073\174" +
    "\074\221\075\210\076\205\101\200\104\173\110\223\120" +
    "\175\121\212\124\216\125\225\126\167\127\222\137\224" +
    "\001\002\000\142\014\uff6c\041\166\042\217\043\213\044" +
    "\uff6c\045\uff6c\046\uff6c\047\172\050\171\051\201\052\220" +
    "\053\206\054\207\055\204\056\202\057\215\060\170\061" +
    "\uff6c\062\uff6c\063\211\064\177\067\uff6c\070\176\073\174" +
    "\074\221\075\210\076\205\100\uff6c\101\200\102\uff6c\103" +
    "\uff6c\104\173\107\uff6c\110\uff6c\111\uff6c\112\uff6c\113\uff6c" +
    "\114\uff6c\115\uff6c\117\uff6c\120\175\121\212\122\uff6c\124" +
    "\216\125\225\126\167\127\222\137\224\001\002\000\076" +
    "\041\166\042\217\043\213\047\172\050\171\051\201\052" +
    "\220\053\206\054\207\055\204\056\202\057\215\060\170" +
    "\063\211\064\177\070\176\073\174\074\221\075\210\076" +
    "\205\101\200\104\173\110\223\120\175\121\212\124\216" +
    "\125\225\126\167\127\222\137\224\001\002\000\076\041" +
    "\166\042\217\043\213\047\172\050\171\051\201\052\220" +
    "\053\206\054\207\055\204\056\202\057\215\060\170\063" +
    "\211\064\177\070\176\073\174\074\221\075\210\076\205" +
    "\101\200\104\173\110\223\120\175\121\212\124\216\125" +
    "\225\126\167\127\222\137\224\001\002\000\076\041\166" +
    "\042\217\043\213\047\172\050\171\051\201\052\220\053" +
    "\206\054\207\055\204\056\202\057\215\060\170\063\211" +
    "\064\177\070\176\073\174\074\221\075\210\076\205\101" +
    "\200\104\173\110\223\120\175\121\212\124\216\125\225" +
    "\126\167\127\222\137\224\001\002\000\076\041\166\042" +
    "\217\043\213\047\172\050\171\051\201\052\220\053\206" +
    "\054\207\055\204\056\202\057\215\060\170\063\211\064" +
    "\177\070\176\073\174\074\221\075\210\076\205\101\200" +
    "\104\173\110\223\120\175\121\212\124\216\125\225\126" +
    "\167\127\222\137\224\001\002\000\010\042\072\126\070" +
    "\137\071\001\002\000\076\041\166\042\217\043\213\047" +
    "\172\050\171\051\201\052\220\053\206\054\207\055\204" +
    "\056\202\057\215\060\170\063\211\064\177\070\176\073" +
    "\174\074\221\075\210\076\205\101\200\104\173\110\223" +
    "\120\175\121\212\124\216\125\225\126\167\127\222\137" +
    "\224\001\002\000\076\041\166\042\217\043\213\047\172" +
    "\050\171\051\201\052\220\053\206\054\207\055\204\056" +
    "\202\057\215\060\170\063\211\064\177\070\176\073\174" +
    "\074\221\075\210\076\205\101\200\104\173\110\223\120" +
    "\175\121\212\124\216\125\225\126\167\127\222\137\224" +
    "\001\002\000\076\041\166\042\217\043\213\047\172\050" +
    "\171\051\201\052\220\053\206\054\207\055\204\056\202" +
    "\057\215\060\170\063\211\064\177\070\176\073\174\074" +
    "\221\075\210\076\205\101\200\104\173\110\223\120\175" +
    "\121\212\124\216\125\225\126\167\127\222\137\224\001" +
    "\002\000\076\041\166\042\217\043\213\047\172\050\171" +
    "\051\201\052\220\053\206\054\207\055\204\056\202\057" +
    "\215\060\170\063\211\064\177\070\176\073\174\074\221" +
    "\075\210\076\205\101\200\104\173\110\223\120\175\121" +
    "\212\124\216\125\225\126\167\127\222\137\224\001\002" +
    "\000\076\041\166\042\217\043\213\047\172\050\171\051" +
    "\201\052\220\053\206\054\207\055\204\056\202\057\215" +
    "\060\170\063\211\064\177\070\176\073\174\074\221\075" +
    "\210\076\205\101\200\104\173\110\223\120\175\121\212" +
    "\124\216\125\225\126\167\127\222\137\224\001\002\000" +
    "\054\014\uff4c\044\uff4c\045\uff4c\046\uff4c\060\241\061\246" +
    "\062\242\063\232\067\uff4c\100\uff4c\102\uff4c\103\uff4c\107" +
    "\uff4c\110\245\111\235\112\253\113\236\114\uff4c\115\uff4c" +
    "\117\247\122\240\001\002\000\076\041\166\042\217\043" +
    "\213\047\172\050\171\051\201\052\220\053\206\054\207" +
    "\055\204\056\202\057\215\060\170\063\211\064\177\070" +
    "\176\073\174\074\221\075\210\076\205\101\200\104\173" +
    "\110\223\120\175\121\212\124\216\125\225\126\167\127" +
    "\222\137\224\001\002\000\054\014\uff52\044\uff52\045\uff52" +
    "\046\uff52\060\241\061\246\062\242\063\232\067\uff52\100" +
    "\uff52\102\uff52\103\uff52\107\uff52\110\uff52\111\uff52\112\uff52" +
    "\113\uff52\114\uff52\115\uff52\117\uff52\122\uff52\001\002\000" +
    "\054\014\uff4b\044\233\045\251\046\uff4b\060\241\061\246" +
    "\062\242\063\232\067\uff4b\100\uff4b\102\uff4b\103\uff4b\107" +
    "\uff4b\110\245\111\235\112\253\113\236\114\uff4b\115\uff4b" +
    "\117\247\122\240\001\002\000\054\014\uff54\044\uff54\045" +
    "\uff54\046\uff54\060\241\061\246\062\242\063\232\067\uff54" +
    "\100\uff54\102\uff54\103\uff54\107\uff54\110\uff54\111\uff54\112" +
    "\uff54\113\uff54\114\uff54\115\uff54\117\uff54\122\uff54\001\002" +
    "\000\054\014\uff42\044\uff42\045\uff42\046\uff42\060\uff42\061" +
    "\uff42\062\uff42\063\uff42\067\uff42\100\uff42\102\uff42\103\uff42" +
    "\107\uff42\110\uff42\111\uff42\112\uff42\113\uff42\114\uff42\115" +
    "\uff42\117\uff42\122\uff42\001\002\000\054\014\uff50\044\uff50" +
    "\045\uff50\046\uff50\060\241\061\246\062\242\063\232\067" +
    "\uff50\100\uff50\102\uff50\103\uff50\107\uff50\110\uff50\111\uff50" +
    "\112\uff50\113\uff50\114\uff50\115\uff50\117\uff50\122\uff50\001" +
    "\002\000\054\014\uff6b\044\uff6b\045\uff6b\046\uff6b\060\uff6b" +
    "\061\uff6b\062\uff6b\063\uff6b\067\uff6b\100\uff6b\102\uff6b\103" +
    "\uff6b\107\uff6b\110\uff6b\111\uff6b\112\uff6b\113\uff6b\114\uff6b" +
    "\115\uff6b\117\uff6b\122\uff6b\001\002\000\054\014\uff4a\044" +
    "\233\045\251\046\250\060\241\061\246\062\242\063\232" +
    "\067\uff4a\100\uff4a\102\uff4a\103\uff4a\107\uff4a\110\245\111" +
    "\235\112\253\113\236\114\uff4a\115\uff4a\117\247\122\240" +
    "\001\002\000\054\014\uff41\044\uff41\045\uff41\046\uff41\060" +
    "\uff41\061\uff41\062\uff41\063\uff41\067\uff41\100\uff41\102\uff41" +
    "\103\uff41\107\uff41\110\uff41\111\uff41\112\uff41\113\uff41\114" +
    "\uff41\115\uff41\117\uff41\122\uff41\001\002\000\054\014\uff40" +
    "\044\uff40\045\uff40\046\uff40\060\uff40\061\246\062\242\063" +
    "\uff40\067\uff40\100\uff40\102\uff40\103\uff40\107\uff40\110\uff40" +
    "\111\uff40\112\uff40\113\uff40\114\uff40\115\uff40\117\uff40\122" +
    "\uff40\001\002\000\054\014\uff53\044\uff53\045\uff53\046\uff53" +
    "\060\241\061\246\062\242\063\232\067\uff53\100\uff53\102" +
    "\uff53\103\uff53\107\uff53\110\uff53\111\uff53\112\uff53\113\uff53" +
    "\114\uff53\115\uff53\117\uff53\122\uff53\001\002\000\054\014" +
    "\uff51\044\uff51\045\uff51\046\uff51\060\241\061\246\062\242" +
    "\063\232\067\uff51\100\uff51\102\uff51\103\uff51\107\uff51\110" +
    "\uff51\111\uff51\112\uff51\113\uff51\114\uff51\115\uff51\117\uff51" +
    "\122\uff51\001\002\000\054\014\uff4f\044\uff4f\045\uff4f\046" +
    "\uff4f\060\241\061\246\062\242\063\232\067\uff4f\100\uff4f" +
    "\102\uff4f\103\uff4f\107\uff4f\110\uff4f\111\uff4f\112\uff4f\113" +
    "\uff4f\114\uff4f\115\uff4f\117\uff4f\122\uff4f\001\002\000\054" +
    "\014\uff49\044\233\045\251\046\250\060\241\061\246\062" +
    "\242\063\232\067\uff49\100\uff49\102\uff49\103\uff49\107\uff49" +
    "\110\245\111\235\112\253\113\236\114\243\115\uff49\117" +
    "\247\122\240\001\002\000\054\014\uff4d\044\uff4d\045\uff4d" +
    "\046\uff4d\060\241\061\246\062\242\063\232\067\uff4d\100" +
    "\uff4d\102\uff4d\103\uff4d\107\uff4d\110\245\111\235\112\253" +
    "\113\236\114\uff4d\115\uff4d\117\247\122\240\001\002\000" +
    "\054\014\uff3f\044\uff3f\045\uff3f\046\uff3f\060\uff3f\061\246" +
    "\062\242\063\uff3f\067\uff3f\100\uff3f\102\uff3f\103\uff3f\107" +
    "\uff3f\110\uff3f\111\uff3f\112\uff3f\113\uff3f\114\uff3f\115\uff3f" +
    "\117\uff3f\122\uff3f\001\002\000\076\041\166\042\217\043" +
    "\213\047\172\050\171\051\201\052\220\053\206\054\207" +
    "\055\204\056\202\057\215\060\170\063\211\064\177\070" +
    "\176\073\174\074\221\075\210\076\205\101\200\104\173" +
    "\110\223\120\175\121\212\124\216\125\225\126\167\127" +
    "\222\137\224\001\002\000\042\044\233\045\251\046\250" +
    "\060\241\061\246\062\242\063\232\103\275\110\245\111" +
    "\235\112\253\113\236\114\243\115\234\117\247\122\240" +
    "\001\002\000\076\041\166\042\217\043\213\047\172\050" +
    "\171\051\201\052\220\053\206\054\207\055\204\056\202" +
    "\057\215\060\170\063\211\064\177\070\176\073\174\074" +
    "\221\075\210\076\205\101\200\104\173\110\223\120\175" +
    "\121\212\124\216\125\225\126\167\127\222\137\224\001" +
    "\002\000\042\044\233\045\251\046\250\060\241\061\246" +
    "\062\242\063\232\102\277\110\245\111\235\112\253\113" +
    "\236\114\243\115\234\117\247\122\240\001\002\000\054" +
    "\014\uff30\044\uff30\045\uff30\046\uff30\060\uff30\061\uff30\062" +
    "\uff30\063\uff30\067\uff30\100\uff30\102\uff30\103\uff30\107\uff30" +
    "\110\uff30\111\uff30\112\uff30\113\uff30\114\uff30\115\uff30\117" +
    "\uff30\122\uff30\001\002\000\076\041\166\042\217\043\213" +
    "\047\172\050\171\051\201\052\220\053\206\054\207\055" +
    "\204\056\202\057\215\060\170\063\211\064\177\070\176" +
    "\073\174\074\221\075\210\076\205\101\200\104\173\110" +
    "\223\120\175\121\212\124\216\125\225\126\167\127\222" +
    "\137\224\001\002\000\042\044\233\045\251\046\250\060" +
    "\241\061\246\062\242\063\232\103\302\110\245\111\235" +
    "\112\253\113\236\114\243\115\234\117\247\122\240\001" +
    "\002\000\076\041\166\042\217\043\213\047\172\050\171" +
    "\051\201\052\220\053\206\054\207\055\204\056\202\057" +
    "\215\060\170\063\211\064\177\070\176\073\174\074\221" +
    "\075\210\076\205\101\200\104\173\110\223\120\175\121" +
    "\212\124\216\125\225\126\167\127\222\137\224\001\002" +
    "\000\042\044\233\045\251\046\250\060\241\061\246\062" +
    "\242\063\232\102\304\110\245\111\235\112\253\113\236" +
    "\114\243\115\234\117\247\122\240\001\002\000\054\014" +
    "\uff38\044\uff38\045\uff38\046\uff38\060\uff38\061\uff38\062\uff38" +
    "\063\uff38\067\uff38\100\uff38\102\uff38\103\uff38\107\uff38\110" +
    "\uff38\111\uff38\112\uff38\113\uff38\114\uff38\115\uff38\117\uff38" +
    "\122\uff38\001\002\000\054\014\uff5b\044\uff5b\045\uff5b\046" +
    "\uff5b\060\uff5b\061\uff5b\062\uff5b\063\uff5b\067\uff5b\100\uff5b" +
    "\102\uff5b\103\uff5b\107\uff5b\110\uff5b\111\uff5b\112\uff5b\113" +
    "\uff5b\114\uff5b\115\uff5b\117\uff5b\122\uff5b\001\002\000\076" +
    "\041\166\042\217\043\213\047\172\050\171\051\201\052" +
    "\220\053\206\054\207\055\204\056\202\057\215\060\170" +
    "\063\211\064\177\070\176\073\174\074\221\075\210\076" +
    "\205\101\200\104\173\110\223\120\175\121\212\124\216" +
    "\125\225\126\167\127\222\137\224\001\002\000\042\044" +
    "\233\045\251\046\250\060\241\061\246\062\242\063\232" +
    "\102\310\110\245\111\235\112\253\113\236\114\243\115" +
    "\234\117\247\122\240\001\002\000\054\014\uff36\044\uff36" +
    "\045\uff36\046\uff36\060\uff36\061\uff36\062\uff36\063\uff36\067" +
    "\uff36\100\uff36\102\uff36\103\uff36\107\uff36\110\uff36\111\uff36" +
    "\112\uff36\113\uff36\114\uff36\115\uff36\117\uff36\122\uff36\001" +
    "\002\000\004\013\312\001\002\000\004\127\313\001\002" +
    "\000\004\105\322\001\002\000\004\014\320\001\002\000" +
    "\006\014\uff6a\103\316\001\002\000\004\127\313\001\002" +
    "\000\004\014\uff69\001\002\000\076\041\166\042\217\043" +
    "\213\047\172\050\171\051\201\052\220\053\206\054\207" +
    "\055\204\056\202\057\215\060\170\063\211\064\177\070" +
    "\176\073\174\074\221\075\210\076\205\101\200\104\173" +
    "\110\223\120\175\121\212\124\216\125\225\126\167\127" +
    "\222\137\224\001\002\000\054\014\uff47\044\233\045\251" +
    "\046\250\060\241\061\246\062\242\063\232\067\uff47\100" +
    "\uff47\102\uff47\103\uff47\107\uff47\110\245\111\235\112\253" +
    "\113\236\114\243\115\234\117\247\122\240\001\002\000" +
    "\004\126\323\001\002\000\006\014\uff68\103\uff68\001\002" +
    "\000\054\014\uff43\044\uff43\045\uff43\046\uff43\060\uff43\061" +
    "\uff43\062\uff43\063\uff43\067\uff43\100\uff43\102\uff43\103\uff43" +
    "\107\uff43\110\uff43\111\uff43\112\uff43\113\uff43\114\uff43\115" +
    "\uff43\117\uff43\122\uff43\001\002\000\004\126\326\001\002" +
    "\000\004\103\327\001\002\000\076\041\166\042\217\043" +
    "\213\047\172\050\171\051\201\052\220\053\206\054\207" +
    "\055\204\056\202\057\215\060\170\063\211\064\177\070" +
    "\176\073\174\074\221\075\210\076\205\101\200\104\173" +
    "\110\223\120\175\121\212\124\216\125\225\126\167\127" +
    "\222\137\224\001\002\000\042\044\233\045\251\046\250" +
    "\060\241\061\246\062\242\063\232\103\331\110\245\111" +
    "\235\112\253\113\236\114\243\115\234\117\247\122\240" +
    "\001\002\000\010\042\072\126\070\137\071\001\002\000" +
    "\004\105\335\001\002\000\004\102\334\001\002\000\054" +
    "\014\uff34\044\uff34\045\uff34\046\uff34\060\uff34\061\uff34\062" +
    "\uff34\063\uff34\067\uff34\100\uff34\102\uff34\103\uff34\107\uff34" +
    "\110\uff34\111\uff34\112\uff34\113\uff34\114\uff34\115\uff34\117" +
    "\uff34\122\uff34\001\002\000\100\041\166\042\217\043\213" +
    "\047\172\050\171\051\201\052\220\053\206\054\207\055" +
    "\204\056\202\057\215\060\170\063\211\064\177\070\176" +
    "\072\336\073\174\074\221\075\210\076\205\101\200\104" +
    "\173\110\223\120\175\121\212\124\216\125\225\126\167" +
    "\127\222\137\224\001\002\000\004\102\uff66\001\002\000" +
    "\044\044\233\045\251\046\250\060\241\061\246\062\242" +
    "\063\232\102\uff67\103\340\110\245\111\235\112\253\113" +
    "\236\114\243\115\234\117\247\122\240\001\002\000\010" +
    "\042\072\126\070\137\071\001\002\000\004\102\uff65\001" +
    "\002\000\004\126\343\001\002\000\004\103\344\001\002" +
    "\000\010\042\072\126\070\137\071\001\002\000\004\102" +
    "\346\001\002\000\054\014\uff35\044\uff35\045\uff35\046\uff35" +
    "\060\uff35\061\uff35\062\uff35\063\uff35\067\uff35\100\uff35\102" +
    "\uff35\103\uff35\107\uff35\110\uff35\111\uff35\112\uff35\113\uff35" +
    "\114\uff35\115\uff35\117\uff35\122\uff35\001\002\000\076\041" +
    "\166\042\217\043\213\047\172\050\171\051\201\052\220" +
    "\053\206\054\207\055\204\056\202\057\215\060\170\063" +
    "\211\064\177\070\176\073\174\074\221\075\210\076\205" +
    "\101\200\104\173\110\223\120\175\121\212\124\216\125" +
    "\225\126\167\127\222\137\224\001\002\000\042\044\233" +
    "\045\251\046\250\060\241\061\246\062\242\063\232\102" +
    "\351\110\245\111\235\112\253\113\236\114\243\115\234" +
    "\117\247\122\240\001\002\000\054\014\uff3b\044\uff3b\045" +
    "\uff3b\046\uff3b\060\uff3b\061\uff3b\062\uff3b\063\uff3b\067\uff3b" +
    "\100\uff3b\102\uff3b\103\uff3b\107\uff3b\110\uff3b\111\uff3b\112" +
    "\uff3b\113\uff3b\114\uff3b\115\uff3b\117\uff3b\122\uff3b\001\002" +
    "\000\004\126\353\001\002\000\004\103\354\001\002\000" +
    "\076\041\166\042\217\043\213\047\172\050\171\051\201" +
    "\052\220\053\206\054\207\055\204\056\202\057\215\060" +
    "\170\063\211\064\177\070\176\073\174\074\221\075\210" +
    "\076\205\101\200\104\173\110\223\120\175\121\212\124" +
    "\216\125\225\126\167\127\222\137\224\001\002\000\042" +
    "\044\233\045\251\046\250\060\241\061\246\062\242\063" +
    "\232\102\356\110\245\111\235\112\253\113\236\114\243" +
    "\115\234\117\247\122\240\001\002\000\054\014\uff33\044" +
    "\uff33\045\uff33\046\uff33\060\uff33\061\uff33\062\uff33\063\uff33" +
    "\067\uff33\100\uff33\102\uff33\103\uff33\107\uff33\110\uff33\111" +
    "\uff33\112\uff33\113\uff33\114\uff33\115\uff33\117\uff33\122\uff33" +
    "\001\002\000\076\041\166\042\217\043\213\047\172\050" +
    "\171\051\201\052\220\053\206\054\207\055\204\056\202" +
    "\057\215\060\170\063\211\064\177\070\176\073\174\074" +
    "\221\075\210\076\205\101\200\104\173\110\223\120\175" +
    "\121\212\124\216\125\225\126\167\127\222\137\224\001" +
    "\002\000\042\044\233\045\251\046\250\060\241\061\246" +
    "\062\242\063\232\103\361\110\245\111\235\112\253\113" +
    "\236\114\243\115\234\117\247\122\240\001\002\000\076" +
    "\041\166\042\217\043\213\047\172\050\171\051\201\052" +
    "\220\053\206\054\207\055\204\056\202\057\215\060\170" +
    "\063\211\064\177\070\176\073\174\074\221\075\210\076" +
    "\205\101\200\104\173\110\223\120\175\121\212\124\216" +
    "\125\225\126\167\127\222\137\224\001\002\000\042\044" +
    "\233\045\251\046\250\060\241\061\246\062\242\063\232" +
    "\102\363\110\245\111\235\112\253\113\236\114\243\115" +
    "\234\117\247\122\240\001\002\000\054\014\uff37\044\uff37" +
    "\045\uff37\046\uff37\060\uff37\061\uff37\062\uff37\063\uff37\067" +
    "\uff37\100\uff37\102\uff37\103\uff37\107\uff37\110\uff37\111\uff37" +
    "\112\uff37\113\uff37\114\uff37\115\uff37\117\uff37\122\uff37\001" +
    "\002\000\004\100\uffbc\001\002\000\076\041\166\042\217" +
    "\043\213\047\172\050\171\051\201\052\220\053\206\054" +
    "\207\055\204\056\202\057\215\060\170\063\211\064\177" +
    "\070\176\073\174\074\221\075\210\076\205\101\200\104" +
    "\173\110\223\120\175\121\212\124\216\125\225\126\167" +
    "\127\222\137\224\001\002\000\042\044\233\045\251\046" +
    "\250\060\241\061\246\062\242\063\232\102\367\110\245" +
    "\111\235\112\253\113\236\114\243\115\234\117\247\122" +
    "\240\001\002\000\054\014\uff32\044\uff32\045\uff32\046\uff32" +
    "\060\uff32\061\uff32\062\uff32\063\uff32\067\uff32\100\uff32\102" +
    "\uff32\103\uff32\107\uff32\110\uff32\111\uff32\112\uff32\113\uff32" +
    "\114\uff32\115\uff32\117\uff32\122\uff32\001\002\000\076\041" +
    "\166\042\217\043\213\047\172\050\171\051\201\052\220" +
    "\053\206\054\207\055\204\056\202\057\215\060\170\063" +
    "\211\064\177\070\176\073\174\074\221\075\210\076\205" +
    "\101\200\104\173\110\223\120\175\121\212\124\216\125" +
    "\225\126\167\127\222\137\224\001\002\000\042\044\233" +
    "\045\251\046\250\060\241\061\246\062\242\063\232\102" +
    "\372\110\245\111\235\112\253\113\236\114\243\115\234" +
    "\117\247\122\240\001\002\000\054\014\uff3a\044\uff3a\045" +
    "\uff3a\046\uff3a\060\uff3a\061\uff3a\062\uff3a\063\uff3a\067\uff3a" +
    "\100\uff3a\102\uff3a\103\uff3a\107\uff3a\110\uff3a\111\uff3a\112" +
    "\uff3a\113\uff3a\114\uff3a\115\uff3a\117\uff3a\122\uff3a\001\002" +
    "\000\042\044\233\045\251\046\250\060\241\061\246\062" +
    "\242\063\232\102\374\110\245\111\235\112\253\113\236" +
    "\114\243\115\234\117\247\122\240\001\002\000\054\014" +
    "\uff58\044\uff58\045\uff58\046\uff58\060\uff58\061\uff58\062\uff58" +
    "\063\uff58\067\uff58\100\uff58\102\uff58\103\uff58\107\uff58\110" +
    "\uff58\111\uff58\112\uff58\113\uff58\114\uff58\115\uff58\117\uff58" +
    "\122\uff58\001\002\000\076\041\166\042\217\043\213\047" +
    "\172\050\171\051\201\052\220\053\206\054\207\055\204" +
    "\056\202\057\215\060\170\063\211\064\177\070\176\073" +
    "\174\074\221\075\210\076\205\101\200\104\173\110\223" +
    "\120\175\121\212\124\216\125\225\126\167\127\222\137" +
    "\224\001\002\000\042\044\233\045\251\046\250\060\241" +
    "\061\246\062\242\063\232\102\377\110\245\111\235\112" +
    "\253\113\236\114\243\115\234\117\247\122\240\001\002" +
    "\000\004\065\u0100\001\002\000\076\041\166\042\217\043" +
    "\213\047\172\050\171\051\201\052\220\053\206\054\207" +
    "\055\204\056\202\057\215\060\170\063\211\064\177\070" +
    "\176\073\174\074\221\075\210\076\205\101\200\104\173" +
    "\110\223\120\175\121\212\124\216\125\225\126\167\127" +
    "\222\137\224\001\002\000\042\044\233\045\251\046\250" +
    "\060\241\061\246\062\242\063\232\067\u0102\110\245\111" +
    "\235\112\253\113\236\114\243\115\234\117\247\122\240" +
    "\001\002\000\076\041\166\042\217\043\213\047\172\050" +
    "\171\051\201\052\220\053\206\054\207\055\204\056\202" +
    "\057\215\060\170\063\211\064\177\070\176\073\174\074" +
    "\221\075\210\076\205\101\200\104\173\110\223\120\175" +
    "\121\212\124\216\125\225\126\167\127\222\137\224\001" +
    "\002\000\054\014\uff3d\044\233\045\251\046\250\060\241" +
    "\061\246\062\242\063\232\067\uff3d\100\uff3d\102\uff3d\103" +
    "\uff3d\107\uff3d\110\245\111\235\112\253\113\236\114\243" +
    "\115\234\117\247\122\240\001\002\000\012\042\u010a\126" +
    "\u0107\127\u0105\137\u0108\001\002\000\010\102\uff7e\103\uff7e" +
    "\105\uff7e\001\002\000\010\102\uff7d\103\uff7d\105\uff7d\001" +
    "\002\000\020\071\u011c\101\u011b\102\uff78\103\uff78\105\uff78" +
    "\107\uff78\116\uff78\001\002\000\010\102\uff7c\103\uff7c\105" +
    "\uff7c\001\002\000\004\102\u010c\001\002\000\004\126\u010b" +
    "\001\002\000\010\102\uff7b\103\uff7b\105\uff7b\001\002\000" +
    "\004\013\u010d\001\002\000\006\031\u0111\036\u010e\001\002" +
    "\000\004\105\u0118\001\002\000\006\014\uff62\103\u0116\001" +
    "\002\000\004\014\u0115\001\002\000\012\042\u010a\126\u0107" +
    "\127\u0105\137\u0108\001\002\000\004\105\u0113\001\002\000" +
    "\076\041\166\042\217\043\213\047\172\050\171\051\201" +
    "\052\220\053\206\054\207\055\204\056\202\057\215\060" +
    "\170\063\211\064\177\070\176\073\174\074\221\075\210" +
    "\076\205\101\200\104\173\110\223\120\175\121\212\124" +
    "\216\125\225\126\167\127\222\137\224\001\002\000\044" +
    "\014\uff60\044\233\045\251\046\250\060\241\061\246\062" +
    "\242\063\232\103\uff60\110\245\111\235\112\253\113\236" +
    "\114\243\115\234\117\247\122\240\001\002\000\054\014" +
    "\uff3c\044\uff3c\045\uff3c\046\uff3c\060\uff3c\061\uff3c\062\uff3c" +
    "\063\uff3c\067\uff3c\100\uff3c\102\uff3c\103\uff3c\107\uff3c\110" +
    "\uff3c\111\uff3c\112\uff3c\113\uff3c\114\uff3c\115\uff3c\117\uff3c" +
    "\122\uff3c\001\002\000\006\031\u0111\036\u010e\001\002\000" +
    "\004\014\uff61\001\002\000\076\041\166\042\217\043\213" +
    "\047\172\050\171\051\201\052\220\053\206\054\207\055" +
    "\204\056\202\057\215\060\170\063\211\064\177\070\176" +
    "\073\174\074\221\075\210\076\205\101\200\104\173\110" +
    "\223\120\175\121\212\124\216\125\225\126\167\127\222" +
    "\137\224\001\002\000\044\014\uff5f\044\233\045\251\046" +
    "\250\060\241\061\246\062\242\063\232\103\uff5f\110\245" +
    "\111\235\112\253\113\236\114\243\115\234\117\247\122" +
    "\240\001\002\000\060\014\uff77\044\uff77\045\uff77\046\uff77" +
    "\060\uff77\061\uff77\062\uff77\063\uff77\067\uff77\100\uff77\102" +
    "\uff77\103\uff77\105\uff77\107\uff77\110\uff77\111\uff77\112\uff77" +
    "\113\uff77\114\uff77\115\uff77\116\uff77\117\uff77\122\uff77\001" +
    "\002\000\012\042\u010a\126\u0107\127\u0105\137\u0108\001\002" +
    "\000\016\036\u011d\042\u0123\101\u0122\104\u0120\127\u011e\137" +
    "\u0121\001\002\000\060\014\uff76\044\uff76\045\uff76\046\uff76" +
    "\060\uff76\061\uff76\062\uff76\063\uff76\067\uff76\100\uff76\102" +
    "\uff76\103\uff76\105\uff76\107\uff76\110\uff76\111\uff76\112\uff76" +
    "\113\uff76\114\uff76\115\uff76\116\uff76\117\uff76\122\uff76\001" +
    "\002\000\062\014\uff75\044\uff75\045\uff75\046\uff75\060\uff75" +
    "\061\uff75\062\uff75\063\uff75\067\uff75\071\uff75\100\uff75\102" +
    "\uff75\103\uff75\105\uff75\107\uff75\110\uff75\111\uff75\112\uff75" +
    "\113\uff75\114\uff75\115\uff75\116\uff75\117\uff75\122\uff75\001" +
    "\002\000\062\014\uff70\044\uff70\045\uff70\046\uff70\060\uff70" +
    "\061\uff70\062\uff70\063\uff70\067\uff70\071\u012a\100\uff70\102" +
    "\uff70\103\uff70\105\uff70\107\uff70\110\uff70\111\uff70\112\uff70" +
    "\113\uff70\114\uff70\115\uff70\116\uff70\117\uff70\122\uff70\001" +
    "\002\000\004\126\u0107\001\002\000\062\014\uff72\044\uff72" +
    "\045\uff72\046\uff72\060\uff72\061\uff72\062\uff72\063\uff72\067" +
    "\uff72\071\uff72\100\uff72\102\uff72\103\uff72\105\uff72\107\uff72" +
    "\110\uff72\111\uff72\112\uff72\113\uff72\114\uff72\115\uff72\116" +
    "\uff72\117\uff72\122\uff72\001\002\000\004\126\u0107\001\002" +
    "\000\004\126\u0124\001\002\000\062\014\uff71\044\uff71\045" +
    "\uff71\046\uff71\060\uff71\061\uff71\062\uff71\063\uff71\067\uff71" +
    "\071\uff71\100\uff71\102\uff71\103\uff71\105\uff71\107\uff71\110" +
    "\uff71\111\uff71\112\uff71\113\uff71\114\uff71\115\uff71\116\uff71" +
    "\117\uff71\122\uff71\001\002\000\004\102\u0126\001\002\000" +
    "\062\014\uff74\044\uff74\045\uff74\046\uff74\060\uff74\061\uff74" +
    "\062\uff74\063\uff74\067\uff74\071\uff74\100\uff74\102\uff74\103" +
    "\uff74\105\uff74\107\uff74\110\uff74\111\uff74\112\uff74\113\uff74" +
    "\114\uff74\115\uff74\116\uff74\117\uff74\122\uff74\001\002\000" +
    "\004\107\u0128\001\002\000\062\014\uff73\044\uff73\045\uff73" +
    "\046\uff73\060\uff73\061\uff73\062\uff73\063\uff73\067\uff73\071" +
    "\uff73\100\uff73\102\uff73\103\uff73\105\uff73\107\uff73\110\uff73" +
    "\111\uff73\112\uff73\113\uff73\114\uff73\115\uff73\116\uff73\117" +
    "\uff73\122\uff73\001\002\000\060\014\uff6f\044\uff6f\045\uff6f" +
    "\046\uff6f\060\uff6f\061\uff6f\062\uff6f\063\uff6f\067\uff6f\100" +
    "\uff6f\102\uff6f\103\uff6f\105\uff6f\107\uff6f\110\uff6f\111\uff6f" +
    "\112\uff6f\113\uff6f\114\uff6f\115\uff6f\116\uff6f\117\uff6f\122" +
    "\uff6f\001\002\000\014\042\u0123\101\u0122\104\u0120\127\u011e" +
    "\137\u0121\001\002\000\004\102\u012f\001\002\000\006\102" +
    "\uff6e\103\u012d\001\002\000\012\042\u010a\126\u0107\127\u0105" +
    "\137\u0108\001\002\000\004\102\uff6d\001\002\000\062\014" +
    "\uff7a\044\uff7a\045\uff7a\046\uff7a\060\uff7a\061\uff7a\062\uff7a" +
    "\063\uff7a\067\uff7a\071\u012a\100\uff7a\102\uff7a\103\uff7a\105" +
    "\uff7a\107\uff7a\110\uff7a\111\uff7a\112\uff7a\113\uff7a\114\uff7a" +
    "\115\uff7a\116\uff7a\117\uff7a\122\uff7a\001\002\000\060\014" +
    "\uff79\044\uff79\045\uff79\046\uff79\060\uff79\061\uff79\062\uff79" +
    "\063\uff79\067\uff79\100\uff79\102\uff79\103\uff79\105\uff79\107" +
    "\uff79\110\uff79\111\uff79\112\uff79\113\uff79\114\uff79\115\uff79" +
    "\116\uff79\117\uff79\122\uff79\001\002\000\076\041\166\042" +
    "\217\043\213\047\172\050\171\051\201\052\220\053\206" +
    "\054\207\055\204\056\202\057\215\060\170\063\211\064" +
    "\177\070\176\073\174\074\221\075\210\076\205\101\200" +
    "\104\173\110\223\120\175\121\212\124\216\125\225\126" +
    "\167\127\222\137\224\001\002\000\042\044\233\045\251" +
    "\046\250\060\241\061\246\062\242\063\232\103\u0133\110" +
    "\245\111\235\112\253\113\236\114\243\115\234\117\247" +
    "\122\240\001\002\000\076\041\166\042\217\043\213\047" +
    "\172\050\171\051\201\052\220\053\206\054\207\055\204" +
    "\056\202\057\215\060\170\063\211\064\177\070\176\073" +
    "\174\074\221\075\210\076\205\101\200\104\173\110\223" +
    "\120\175\121\212\124\216\125\225\126\167\127\222\137" +
    "\224\001\002\000\042\044\233\045\251\046\250\060\241" +
    "\061\246\062\242\063\232\102\u0135\110\245\111\235\112" +
    "\253\113\236\114\243\115\234\117\247\122\240\001\002" +
    "\000\054\014\uff31\044\uff31\045\uff31\046\uff31\060\uff31\061" +
    "\uff31\062\uff31\063\uff31\067\uff31\100\uff31\102\uff31\103\uff31" +
    "\107\uff31\110\uff31\111\uff31\112\uff31\113\uff31\114\uff31\115" +
    "\uff31\117\uff31\122\uff31\001\002\000\042\044\233\045\251" +
    "\046\250\060\241\061\246\062\242\063\232\107\u0137\110" +
    "\245\111\235\112\253\113\236\114\243\115\234\117\247" +
    "\122\240\001\002\000\054\014\uff59\044\uff59\045\uff59\046" +
    "\uff59\060\uff59\061\uff59\062\uff59\063\uff59\067\uff59\100\uff59" +
    "\102\uff59\103\uff59\107\uff59\110\uff59\111\uff59\112\uff59\113" +
    "\uff59\114\uff59\115\uff59\117\uff59\122\uff59\001\002\000\054" +
    "\014\uff4e\044\uff4e\045\uff4e\046\uff4e\060\uff4e\061\uff4e\062" +
    "\uff4e\063\uff4e\067\uff4e\100\uff4e\102\uff4e\103\uff4e\107\uff4e" +
    "\110\uff4e\111\uff4e\112\uff4e\113\uff4e\114\uff4e\115\uff4e\117" +
    "\uff4e\122\uff4e\001\002\000\076\041\166\042\217\043\213" +
    "\047\172\050\171\051\201\052\220\053\206\054\207\055" +
    "\204\056\202\057\215\060\170\063\211\064\177\070\176" +
    "\073\174\074\221\075\210\076\205\101\200\104\173\110" +
    "\223\120\175\121\212\124\216\125\225\126\167\127\222" +
    "\137\224\001\002\000\042\044\233\045\251\046\250\060" +
    "\241\061\246\062\242\063\232\102\u013b\110\245\111\235" +
    "\112\253\113\236\114\243\115\234\117\247\122\240\001" +
    "\002\000\054\014\uff39\044\uff39\045\uff39\046\uff39\060\uff39" +
    "\061\uff39\062\uff39\063\uff39\067\uff39\100\uff39\102\uff39\103" +
    "\uff39\107\uff39\110\uff39\111\uff39\112\uff39\113\uff39\114\uff39" +
    "\115\uff39\117\uff39\122\uff39\001\002\000\054\014\uff44\044" +
    "\uff44\045\uff44\046\uff44\060\uff44\061\uff44\062\uff44\063\uff44" +
    "\067\uff44\100\uff44\102\uff44\103\uff44\107\uff44\110\uff44\111" +
    "\uff44\112\uff44\113\uff44\114\uff44\115\uff44\117\uff44\122\uff44" +
    "\001\002\000\004\013\u0144\001\002\000\076\041\166\042" +
    "\217\043\213\047\172\050\171\051\201\052\220\053\206" +
    "\054\207\055\204\056\202\057\215\060\170\063\211\064" +
    "\177\070\176\073\174\074\221\075\210\076\205\101\200" +
    "\104\173\110\223\120\175\121\212\124\216\125\225\126" +
    "\167\127\222\137\224\001\002\000\004\107\u0143\001\002" +
    "\000\044\044\233\045\251\046\250\060\241\061\246\062" +
    "\242\063\232\103\u0141\107\uff64\110\245\111\235\112\253" +
    "\113\236\114\243\115\234\117\247\122\240\001\002\000" +
    "\076\041\166\042\217\043\213\047\172\050\171\051\201" +
    "\052\220\053\206\054\207\055\204\056\202\057\215\060" +
    "\170\063\211\064\177\070\176\073\174\074\221\075\210" +
    "\076\205\101\200\104\173\110\223\120\175\121\212\124" +
    "\216\125\225\126\167\127\222\137\224\001\002\000\004" +
    "\107\uff63\001\002\000\054\014\uff57\044\uff57\045\uff57\046" +
    "\uff57\060\uff57\061\uff57\062\uff57\063\uff57\067\uff57\100\uff57" +
    "\102\uff57\103\uff57\107\uff57\110\uff57\111\uff57\112\uff57\113" +
    "\uff57\114\uff57\115\uff57\117\uff57\122\uff57\001\002\000\004" +
    "\127\313\001\002\000\004\014\u0146\001\002\000\076\041" +
    "\166\042\217\043\213\047\172\050\171\051\201\052\220" +
    "\053\206\054\207\055\204\056\202\057\215\060\170\063" +
    "\211\064\177\070\176\073\174\074\221\075\210\076\205" +
    "\101\200\104\173\110\223\120\175\121\212\124\216\125" +
    "\225\126\167\127\222\137\224\001\002\000\054\014\uff3e" +
    "\044\233\045\251\046\250\060\241\061\246\062\242\063" +
    "\232\067\uff3e\100\uff3e\102\uff3e\103\uff3e\107\uff3e\110\245" +
    "\111\235\112\253\113\236\114\243\115\234\117\247\122" +
    "\240\001\002\000\004\013\u0149\001\002\000\004\127\313" +
    "\001\002\000\004\014\u014b\001\002\000\076\041\166\042" +
    "\217\043\213\047\172\050\171\051\201\052\220\053\206" +
    "\054\207\055\204\056\202\057\215\060\170\063\211\064" +
    "\177\070\176\073\174\074\221\075\210\076\205\101\200" +
    "\104\173\110\223\120\175\121\212\124\216\125\225\126" +
    "\167\127\222\137\224\001\002\000\054\014\uff48\044\233" +
    "\045\251\046\250\060\241\061\246\062\242\063\232\067" +
    "\uff48\100\uff48\102\uff48\103\uff48\107\uff48\110\245\111\235" +
    "\112\253\113\236\114\243\115\234\117\247\122\240\001" +
    "\002\000\004\126\u014e\001\002\000\004\100\u014f\001\002" +
    "\000\012\006\026\010\u0152\011\u0153\025\u0150\001\002\000" +
    "\004\116\u01ac\001\002\000\004\100\u01a6\001\002\000\004" +
    "\013\u016a\001\002\000\004\013\u0154\001\002\000\006\047" +
    "\031\126\033\001\002\000\004\014\u0156\001\002\000\004" +
    "\100\u0157\001\002\000\006\006\026\025\u0158\001\002\000" +
    "\004\116\u0160\001\002\000\004\100\u015a\001\002\000\004" +
    "\007\u015b\001\002\000\004\116\u015c\001\002\000\004\125" +
    "\u015d\001\002\000\004\100\u015e\001\002\000\004\014\u015f" +
    "\001\002\000\012\002\uff23\004\uff23\005\uff23\030\uff23\001" +
    "\002\000\006\024\051\124\050\001\002\000\004\100\u0162" +
    "\001\002\000\004\006\026\001\002\000\004\100\u0164\001" +
    "\002\000\004\007\u0165\001\002\000\004\116\u0166\001\002" +
    "\000\004\125\u0167\001\002\000\004\100\u0168\001\002\000" +
    "\004\014\u0169\001\002\000\012\002\uff2b\004\uff2b\005\uff2b" +
    "\030\uff2b\001\002\000\004\126\u016d\001\002\000\006\014" +
    "\uff92\126\u016d\001\002\000\004\014\u017a\001\002\000\004" +
    "\105\u016e\001\002\000\004\013\u016f\001\002\000\006\042" +
    "\u0172\126\u0170\001\002\000\006\014\uff87\103\u0178\001\002" +
    "\000\004\014\u0176\001\002\000\004\126\u0173\001\002\000" +
    "\006\014\uff85\103\u0174\001\002\000\006\042\u0172\126\u0170" +
    "\001\002\000\004\014\uff84\001\002\000\004\100\u0177\001" +
    "\002\000\006\014\uff90\126\uff90\001\002\000\006\042\u0172" +
    "\126\u0170\001\002\000\004\014\uff86\001\002\000\004\100" +
    "\u017b\001\002\000\010\006\026\011\u017e\025\u017c\001\002" +
    "\000\004\116\u019b\001\002\000\004\100\u0195\001\002\000" +
    "\004\013\u017f\001\002\000\006\047\031\126\033\001\002" +
    "\000\004\014\u0181\001\002\000\004\100\u0182\001\002\000" +
    "\006\006\026\025\u0183\001\002\000\004\116\u018b\001\002" +
    "\000\004\100\u0185\001\002\000\004\007\u0186\001\002\000" +
    "\004\116\u0187\001\002\000\004\125\u0188\001\002\000\004" +
    "\100\u0189\001\002\000\004\014\u018a\001\002\000\012\002" +
    "\uff25\004\uff25\005\uff25\030\uff25\001\002\000\006\024\051" +
    "\124\050\001\002\000\004\100\u018d\001\002\000\004\006" +
    "\026\001\002\000\004\100\u018f\001\002\000\004\007\u0190" +
    "\001\002\000\004\116\u0191\001\002\000\004\125\u0192\001" +
    "\002\000\004\100\u0193\001\002\000\004\014\u0194\001\002" +
    "\000\012\002\uff2d\004\uff2d\005\uff2d\030\uff2d\001\002\000" +
    "\004\007\u0196\001\002\000\004\116\u0197\001\002\000\004" +
    "\125\u0198\001\002\000\004\100\u0199\001\002\000\004\014" +
    "\u019a\001\002\000\012\002\uff21\004\uff21\005\uff21\030\uff21" +
    "\001\002\000\006\024\051\124\050\001\002\000\004\100" +
    "\u019d\001\002\000\004\006\026\001\002\000\004\100\u019f" +
    "\001\002\000\004\007\u01a0\001\002\000\004\116\u01a1\001" +
    "\002\000\004\125\u01a2\001\002\000\004\100\u01a3\001\002" +
    "\000\004\014\u01a4\001\002\000\012\002\uff29\004\uff29\005" +
    "\uff29\030\uff29\001\002\000\004\014\uff91\001\002\000\004" +
    "\007\u01a7\001\002\000\004\116\u01a8\001\002\000\004\125" +
    "\u01a9\001\002\000\004\100\u01aa\001\002\000\004\014\u01ab" +
    "\001\002\000\012\002\uff1f\004\uff1f\005\uff1f\030\uff1f\001" +
    "\002\000\006\024\051\124\050\001\002\000\004\100\u01ae" +
    "\001\002\000\004\006\026\001\002\000\004\100\u01b0\001" +
    "\002\000\004\007\u01b1\001\002\000\004\116\u01b2\001\002" +
    "\000\004\125\u01b3\001\002\000\004\100\u01b4\001\002\000" +
    "\004\014\u01b5\001\002\000\012\002\uff27\004\uff27\005\uff27" +
    "\030\uff27\001\002\000\004\126\u016d\001\002\000\004\014" +
    "\u01b8\001\002\000\004\100\u01b9\001\002\000\012\006\026" +
    "\011\u01bd\025\u01ba\030\u01bc\001\002\000\004\116\u01f3\001" +
    "\002\000\004\100\u01ed\001\002\000\004\013\u01d4\001\002" +
    "\000\004\013\u01be\001\002\000\006\047\031\126\033\001" +
    "\002\000\004\014\u01c0\001\002\000\004\100\u01c1\001\002" +
    "\000\006\006\026\025\u01c2\001\002\000\004\116\u01ca\001" +
    "\002\000\004\100\u01c4\001\002\000\004\007\u01c5\001\002" +
    "\000\004\116\u01c6\001\002\000\004\125\u01c7\001\002\000" +
    "\004\100\u01c8\001\002\000\004\014\u01c9\001\002\000\012" +
    "\002\uff24\004\uff24\005\uff24\030\uff24\001\002\000\006\024" +
    "\051\124\050\001\002\000\004\100\u01cc\001\002\000\004" +
    "\006\026\001\002\000\004\100\u01ce\001\002\000\004\007" +
    "\u01cf\001\002\000\004\116\u01d0\001\002\000\004\125\u01d1" +
    "\001\002\000\004\100\u01d2\001\002\000\004\014\u01d3\001" +
    "\002\000\012\002\uff2c\004\uff2c\005\uff2c\030\uff2c\001\002" +
    "\000\006\047\031\126\033\001\002\000\004\014\u01d6\001" +
    "\002\000\004\100\u01d7\001\002\000\004\011\u01d8\001\002" +
    "\000\004\013\u01d9\001\002\000\006\047\031\126\033\001" +
    "\002\000\004\014\u01db\001\002\000\004\100\u01dc\001\002" +
    "\000\006\006\026\077\u01dd\001\002\000\004\116\u01e5\001" +
    "\002\000\004\100\u01df\001\002\000\004\007\u01e0\001\002" +
    "\000\004\116\u01e1\001\002\000\004\125\u01e2\001\002\000" +
    "\004\100\u01e3\001\002\000\004\014\u01e4\001\002\000\012" +
    "\002\uff1d\004\uff1d\005\uff1d\030\uff1d\001\002\000\076\041" +
    "\166\042\217\043\213\047\172\050\171\051\201\052\220" +
    "\053\206\054\207\055\204\056\202\057\215\060\170\063" +
    "\211\064\177\070\176\073\174\074\221\075\210\076\205" +
    "\101\200\104\173\110\223\120\175\121\212\124\216\125" +
    "\225\126\167\127\222\137\224\001\002\000\042\044\233" +
    "\045\251\046\250\060\241\061\246\062\242\063\232\100" +
    "\u01e7\110\245\111\235\112\253\113\236\114\243\115\234" +
    "\117\247\122\240\001\002\000\004\007\u01e8\001\002\000" +
    "\004\116\u01e9\001\002\000\004\125\u01ea\001\002\000\004" +
    "\100\u01eb\001\002\000\004\014\u01ec\001\002\000\012\002" +
    "\uff1c\004\uff1c\005\uff1c\030\uff1c\001\002\000\004\007\u01ee" +
    "\001\002\000\004\116\u01ef\001\002\000\004\125\u01f0\001" +
    "\002\000\004\100\u01f1\001\002\000\004\014\u01f2\001\002" +
    "\000\012\002\uff20\004\uff20\005\uff20\030\uff20\001\002\000" +
    "\006\024\051\124\050\001\002\000\004\100\u01f5\001\002" +
    "\000\004\006\026\001\002\000\004\100\u01f7\001\002\000" +
    "\004\007\u01f8\001\002\000\004\116\u01f9\001\002\000\004" +
    "\125\u01fa\001\002\000\004\100\u01fb\001\002\000\004\014" +
    "\u01fc\001\002\000\012\002\uff28\004\uff28\005\uff28\030\uff28" +
    "\001\002\000\004\007\u01fe\001\002\000\004\116\u01ff\001" +
    "\002\000\004\125\u0200\001\002\000\004\100\u0201\001\002" +
    "\000\004\014\u0202\001\002\000\012\002\uff1e\004\uff1e\005" +
    "\uff1e\030\uff1e\001\002\000\006\024\051\124\050\001\002" +
    "\000\004\100\u0205\001\002\000\004\006\026\001\002\000" +
    "\004\100\u0207\001\002\000\004\007\u0208\001\002\000\004" +
    "\116\u0209\001\002\000\004\125\u020a\001\002\000\004\100" +
    "\u020b\001\002\000\004\014\u020c\001\002\000\012\002\uff26" +
    "\004\uff26\005\uff26\030\uff26\001\002\000\004\002\001\001" +
    "\002\000\004\013\u020f\001\002\000\026\010\u021a\012\u0218" +
    "\017\u021e\020\u0216\021\u021f\022\u0210\026\u0212\040\u0220\135" +
    "\u0213\136\u021b\001\002\000\004\013\u02ba\001\002\000\026" +
    "\010\u021a\014\uffe5\017\u021e\020\u0216\021\u021f\022\u0210\026" +
    "\u0212\040\u0220\135\u0213\136\u021b\001\002\000\004\013\u026e" +
    "\001\002\000\004\013\uffa7\001\002\000\026\010\u021a\014" +
    "\uffe6\017\u021e\020\u0216\021\u021f\022\u0210\026\u0212\040\u0220" +
    "\135\u0213\136\u021b\001\002\000\026\010\u021a\014\uffe9\017" +
    "\u021e\020\u0216\021\u021f\022\u0210\026\u0212\040\u0220\135\u0213" +
    "\136\u021b\001\002\000\004\013\u0262\001\002\000\026\010" +
    "\u021a\014\uffe7\017\u021e\020\u0216\021\u021f\022\u0210\026\u0212" +
    "\040\u0220\135\u0213\136\u021b\001\002\000\006\013\u0251\116" +
    "\u0252\001\002\000\026\010\u021a\014\uffec\017\u021e\020\u0216" +
    "\021\u021f\022\u0210\026\u0212\040\u0220\135\u0213\136\u021b\001" +
    "\002\000\004\013\u024c\001\002\000\004\013\uffa6\001\002" +
    "\000\004\014\u024b\001\002\000\026\010\u021a\014\uffe8\017" +
    "\u021e\020\u0216\021\u021f\022\u0210\026\u0212\040\u0220\135\u0213" +
    "\136\u021b\001\002\000\004\013\u0240\001\002\000\004\013" +
    "\u0236\001\002\000\004\116\u0233\001\002\000\026\010\u021a" +
    "\014\uffeb\017\u021e\020\u0216\021\u021f\022\u0210\026\u0212\040" +
    "\u0220\135\u0213\136\u021b\001\002\000\026\010\u021a\014\uffea" +
    "\017\u021e\020\u0216\021\u021f\022\u0210\026\u0212\040\u0220\135" +
    "\u0213\136\u021b\001\002\000\004\013\u0227\001\002\000\024" +
    "\010\u021a\017\u021e\020\u0216\021\u021f\022\u0210\026\u0212\040" +
    "\u0220\135\u0213\136\u021b\001\002\000\004\014\u0226\001\002" +
    "\000\012\002\ufffa\004\ufffa\005\ufffa\030\ufffa\001\002\000" +
    "\004\126\u0107\001\002\000\004\116\u022e\001\002\000\006" +
    "\014\uffa5\126\u0107\001\002\000\004\014\u022b\001\002\000" +
    "\004\100\u022c\001\002\000\026\010\uffa8\014\uffa8\017\uffa8" +
    "\020\uffa8\021\uffa8\022\uffa8\026\uffa8\040\uffa8\135\uffa8\136" +
    "\uffa8\001\002\000\004\014\uffa4\001\002\000\076\041\166" +
    "\042\217\043\213\047\172\050\171\051\201\052\220\053" +
    "\206\054\207\055\204\056\202\057\215\060\170\063\211" +
    "\064\177\070\176\073\174\074\221\075\210\076\205\101" +
    "\200\104\173\110\223\120\175\121\212\124\216\125\225" +
    "\126\167\127\222\137\224\001\002\000\042\044\233\045" +
    "\251\046\250\060\241\061\246\062\242\063\232\100\u0230" +
    "\110\245\111\235\112\253\113\236\114\243\115\234\117" +
    "\247\122\240\001\002\000\006\014\uffa3\126\uffa3\001\002" +
    "\000\004\014\ufff2\001\002\000\004\014\ufff3\001\002\000" +
    "\076\041\166\042\217\043\213\047\172\050\171\051\201" +
    "\052\220\053\206\054\207\055\204\056\202\057\215\060" +
    "\170\063\211\064\177\070\176\073\174\074\221\075\210" +
    "\076\205\101\200\104\173\110\223\120\175\121\212\124" +
    "\216\125\225\126\167\127\222\137\224\001\002\000\042" +
    "\044\233\045\251\046\250\060\241\061\246\062\242\063" +
    "\232\100\u0235\110\245\111\235\112\253\113\236\114\243" +
    "\115\234\117\247\122\240\001\002\000\026\010\uffa2\014" +
    "\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2\026\uffa2\040\uffa2" +
    "\135\uffa2\136\uffa2\001\002\000\100\014\u0238\041\166\042" +
    "\217\043\213\047\172\050\171\051\201\052\220\053\206" +
    "\054\207\055\204\056\202\057\215\060\170\063\211\064" +
    "\177\070\176\073\174\074\221\075\210\076\205\101\200" +
    "\104\173\110\223\120\175\121\212\124\216\125\225\126" +
    "\167\127\222\137\224\001\002\000\100\014\uff95\041\166" +
    "\042\217\043\213\047\172\050\171\051\201\052\220\053" +
    "\206\054\207\055\204\056\202\057\215\060\170\063\211" +
    "\064\177\070\176\073\174\074\221\075\210\076\205\101" +
    "\200\104\173\110\223\120\175\121\212\124\216\125\225" +
    "\126\167\127\222\137\224\001\002\000\004\100\u023e\001" +
    "\002\000\004\014\u023c\001\002\000\042\044\233\045\251" +
    "\046\250\060\241\061\246\062\242\063\232\100\u023b\110" +
    "\245\111\235\112\253\113\236\114\243\115\234\117\247" +
    "\122\240\001\002\000\100\014\uff93\041\uff93\042\uff93\043" +
    "\uff93\047\uff93\050\uff93\051\uff93\052\uff93\053\uff93\054\uff93" +
    "\055\uff93\056\uff93\057\uff93\060\uff93\063\uff93\064\uff93\070" +
    "\uff93\073\uff93\074\uff93\075\uff93\076\uff93\101\uff93\104\uff93" +
    "\110\uff93\120\uff93\121\uff93\124\uff93\125\uff93\126\uff93\127" +
    "\uff93\137\uff93\001\002\000\004\100\u023d\001\002\000\026" +
    "\010\uff97\014\uff97\017\uff97\020\uff97\021\uff97\022\uff97\026" +
    "\uff97\040\uff97\135\uff97\136\uff97\001\002\000\026\010\uff96" +
    "\014\uff96\017\uff96\020\uff96\021\uff96\022\uff96\026\uff96\040" +
    "\uff96\135\uff96\136\uff96\001\002\000\004\014\uff94\001\002" +
    "\000\100\014\u0241\041\166\042\217\043\213\047\172\050" +
    "\171\051\201\052\220\053\206\054\207\055\204\056\202" +
    "\057\215\060\170\063\211\064\177\070\176\073\174\074" +
    "\221\075\210\076\205\101\200\104\173\110\223\120\175" +
    "\121\212\124\216\125\225\126\167\127\222\137\224\001" +
    "\002\000\004\100\u0249\001\002\000\042\044\233\045\251" +
    "\046\250\060\241\061\246\062\242\063\232\100\u0248\110" +
    "\245\111\235\112\253\113\236\114\243\115\234\117\247" +
    "\122\240\001\002\000\004\014\u0246\001\002\000\100\014" +
    "\uff9f\041\166\042\217\043\213\047\172\050\171\051\201" +
    "\052\220\053\206\054\207\055\204\056\202\057\215\060" +
    "\170\063\211\064\177\070\176\073\174\074\221\075\210" +
    "\076\205\101\200\104\173\110\223\120\175\121\212\124" +
    "\216\125\225\126\167\127\222\137\224\001\002\000\004" +
    "\014\uff9e\001\002\000\004\100\u0247\001\002\000\026\010" +
    "\uffa1\014\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1\026\uffa1" +
    "\040\uffa1\135\uffa1\136\uffa1\001\002\000\100\014\uff9d\041" +
    "\uff9d\042\uff9d\043\uff9d\047\uff9d\050\uff9d\051\uff9d\052\uff9d" +
    "\053\uff9d\054\uff9d\055\uff9d\056\uff9d\057\uff9d\060\uff9d\063" +
    "\uff9d\064\uff9d\070\uff9d\073\uff9d\074\uff9d\075\uff9d\076\uff9d" +
    "\101\uff9d\104\uff9d\110\uff9d\120\uff9d\121\uff9d\124\uff9d\125" +
    "\uff9d\126\uff9d\127\uff9d\137\uff9d\001\002\000\026\010\uffa0" +
    "\014\uffa0\017\uffa0\020\uffa0\021\uffa0\022\uffa0\026\uffa0\040" +
    "\uffa0\135\uffa0\136\uffa0\001\002\000\004\014\ufff0\001\002" +
    "\000\012\002\ufff9\004\ufff9\005\ufff9\030\ufff9\001\002\000" +
    "\004\126\u016d\001\002\000\004\014\u024e\001\002\000\004" +
    "\100\u024f\001\002\000\026\010\uffe4\014\uffe4\017\uffe4\020" +
    "\uffe4\021\uffe4\022\uffe4\026\uffe4\040\uffe4\135\uffe4\136\uffe4" +
    "\001\002\000\004\014\ufff4\001\002\000\006\014\u025d\126" +
    "\u0255\001\002\000\004\013\u0253\001\002\000\006\014\u0256" +
    "\126\u0255\001\002\000\004\014\u025a\001\002\000\006\014" +
    "\uffd8\103\u0258\001\002\000\004\100\u0257\001\002\000\024" +
    "\010\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\026\ufff7\040" +
    "\ufff7\135\ufff7\136\ufff7\001\002\000\004\126\u0255\001\002" +
    "\000\004\014\uffd7\001\002\000\004\100\u025b\001\002\000" +
    "\024\010\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\026\ufff8" +
    "\040\ufff8\135\ufff8\136\ufff8\001\002\000\004\014\u025f\001" +
    "\002\000\004\100\u025e\001\002\000\024\010\ufff5\017\ufff5" +
    "\020\ufff5\021\ufff5\022\ufff5\026\ufff5\040\ufff5\135\ufff5\136" +
    "\ufff5\001\002\000\004\100\u0260\001\002\000\024\010\ufff6" +
    "\017\ufff6\020\ufff6\021\ufff6\022\ufff6\026\ufff6\040\ufff6\135" +
    "\ufff6\136\ufff6\001\002\000\004\014\uffef\001\002\000\100" +
    "\014\u0263\041\166\042\217\043\213\047\172\050\171\051" +
    "\201\052\220\053\206\054\207\055\204\056\202\057\215" +
    "\060\170\063\211\064\177\070\176\073\174\074\221\075" +
    "\210\076\205\101\200\104\173\110\223\120\175\121\212" +
    "\124\216\125\225\126\167\127\222\137\224\001\002\000" +
    "\004\100\u026b\001\002\000\004\014\u0269\001\002\000\042" +
    "\044\233\045\251\046\250\060\241\061\246\062\242\063" +
    "\232\100\u0268\110\245\111\235\112\253\113\236\114\243" +
    "\115\234\117\247\122\240\001\002\000\100\014\uff9a\041" +
    "\166\042\217\043\213\047\172\050\171\051\201\052\220" +
    "\053\206\054\207\055\204\056\202\057\215\060\170\063" +
    "\211\064\177\070\176\073\174\074\221\075\210\076\205" +
    "\101\200\104\173\110\223\120\175\121\212\124\216\125" +
    "\225\126\167\127\222\137\224\001\002\000\004\014\uff99" +
    "\001\002\000\100\014\uff98\041\uff98\042\uff98\043\uff98\047" +
    "\uff98\050\uff98\051\uff98\052\uff98\053\uff98\054\uff98\055\uff98" +
    "\056\uff98\057\uff98\060\uff98\063\uff98\064\uff98\070\uff98\073" +
    "\uff98\074\uff98\075\uff98\076\uff98\101\uff98\104\uff98\110\uff98" +
    "\120\uff98\121\uff98\124\uff98\125\uff98\126\uff98\127\uff98\137" +
    "\uff98\001\002\000\004\100\u026a\001\002\000\026\010\uff9c" +
    "\014\uff9c\017\uff9c\020\uff9c\021\uff9c\022\uff9c\026\uff9c\040" +
    "\uff9c\135\uff9c\136\uff9c\001\002\000\026\010\uff9b\014\uff9b" +
    "\017\uff9b\020\uff9b\021\uff9b\022\uff9b\026\uff9b\040\uff9b\135" +
    "\uff9b\136\uff9b\001\002\000\004\014\ufff1\001\002\000\004" +
    "\014\uffee\001\002\000\004\126\u0270\001\002\000\004\014" +
    "\u02b7\001\002\000\006\101\u0274\105\u0273\001\002\000\006" +
    "\014\uffb2\126\u0270\001\002\000\004\014\uffb1\001\002\000" +
    "\004\013\uffbb\001\002\000\012\126\u0281\131\u0280\132\u0282" +
    "\133\u027e\001\002\000\004\013\u0276\001\002\000\016\015" +
    "\u0279\027\u027a\032\u0277\033\u027c\034\u0278\134\u027b\001\002" +
    "\000\004\103\u02a7\001\002\000\004\103\u029f\001\002\000" +
    "\004\103\u0295\001\002\000\004\103\u028d\001\002\000\004" +
    "\103\u0285\001\002\000\004\103\u027d\001\002\000\012\126" +
    "\u0281\131\u0280\132\u0282\133\u027e\001\002\000\012\014\uffb5" +
    "\102\uffb5\103\uffb5\112\uffb5\001\002\000\004\014\u0283\001" +
    "\002\000\012\014\uffb4\102\uffb4\103\uffb4\112\uffb4\001\002" +
    "\000\012\014\uffb7\102\uffb7\103\uffb7\112\uffb7\001\002\000" +
    "\012\014\uffb6\102\uffb6\103\uffb6\112\uffb6\001\002\000\004" +
    "\100\u0284\001\002\000\006\014\uffaa\126\uffaa\001\002\000" +
    "\012\126\u0281\131\u0280\132\u0282\133\u027e\001\002\000\004" +
    "\103\u0287\001\002\000\004\036\u0288\001\002\000\004\116" +
    "\u0289\001\002\000\034\023\106\024\112\042\103\063\101" +
    "\101\120\104\116\110\115\120\111\121\114\124\102\125" +
    "\113\126\104\137\107\001\002\000\004\014\u028b\001\002" +
    "\000\004\100\u028c\001\002\000\006\014\uffaf\126\uffaf\001" +
    "\002\000\012\126\u0281\131\u0280\132\u0282\133\u027e\001\002" +
    "\000\004\103\u028f\001\002\000\004\036\u0290\001\002\000" +
    "\004\116\u0291\001\002\000\034\023\106\024\112\042\103" +
    "\063\101\101\120\104\116\110\115\120\111\121\114\124" +
    "\102\125\113\126\104\137\107\001\002\000\004\014\u0293" +
    "\001\002\000\004\100\u0294\001\002\000\006\014\uffb0\126" +
    "\uffb0\001\002\000\012\126\u0281\131\u0280\132\u0282\133\u027e" +
    "\001\002\000\006\014\u0298\103\u0297\001\002\000\004\035" +
    "\u029a\001\002\000\004\100\u0299\001\002\000\006\014\uffab" +
    "\126\uffab\001\002\000\004\116\u029b\001\002\000\004\124" +
    "\u029c\001\002\000\004\014\u029d\001\002\000\004\100\u029e" +
    "\001\002\000\006\014\uffad\126\uffad\001\002\000\012\126" +
    "\u0281\131\u0280\132\u0282\133\u027e\001\002\000\004\103\u02a1" +
    "\001\002\000\004\036\u02a2\001\002\000\004\116\u02a3\001" +
    "\002\000\034\023\106\024\112\042\103\063\101\101\120" +
    "\104\116\110\115\120\111\121\114\124\102\125\113\126" +
    "\104\137\107\001\002\000\004\014\u02a5\001\002\000\004" +
    "\100\u02a6\001\002\000\006\014\uffa9\126\uffa9\001\002\000" +
    "\012\126\u0281\131\u0280\132\u0282\133\u027e\001\002\000\006" +
    "\014\u02aa\103\u02a9\001\002\000\004\035\u02ac\001\002\000" +
    "\004\100\u02ab\001\002\000\006\014\uffac\126\uffac\001\002" +
    "\000\004\116\u02ad\001\002\000\004\124\u02ae\001\002\000" +
    "\004\014\u02af\001\002\000\004\100\u02b0\001\002\000\006" +
    "\014\uffae\126\uffae\001\002\000\006\102\uffb9\103\u02b5\001" +
    "\002\000\004\102\u02b3\001\002\000\004\105\u02b4\001\002" +
    "\000\004\013\uffba\001\002\000\012\126\u0281\131\u0280\132" +
    "\u0282\133\u027e\001\002\000\004\102\uffb8\001\002\000\004" +
    "\100\u02b8\001\002\000\026\010\uffb3\014\uffb3\017\uffb3\020" +
    "\uffb3\021\uffb3\022\uffb3\026\uffb3\040\uffb3\135\uffb3\136\uffb3" +
    "\001\002\000\004\014\uffed\001\002\000\004\126\u02bd\001" +
    "\002\000\004\014\u02e3\001\002\000\006\014\uffe2\126\u02bd" +
    "\001\002\000\004\105\u02be\001\002\000\014\013\u02c0\104" +
    "\u02c1\110\u02c2\126\u02c3\130\u02bf\001\002\000\004\100\u02e1" +
    "\001\002\000\004\137\u02d5\001\002\000\004\126\u02cd\001" +
    "\002\000\010\042\072\126\070\137\071\001\002\000\004" +
    "\100\u02c4\001\002\000\006\014\uffdf\126\uffdf\001\002\000" +
    "\004\105\u02c9\001\002\000\004\112\u02c7\001\002\000\004" +
    "\100\u02c8\001\002\000\006\014\uffdb\126\uffdb\001\002\000" +
    "\012\126\u0281\131\u0280\132\u0282\133\u027e\001\002\000\006" +
    "\103\u02cb\112\uffda\001\002\000\010\042\072\126\070\137" +
    "\071\001\002\000\004\112\uffd9\001\002\000\004\107\u02ce" +
    "\001\002\000\004\110\u02cf\001\002\000\004\106\u02d0\001" +
    "\002\000\004\105\u02d1\001\002\000\012\126\u0281\131\u0280" +
    "\132\u0282\133\u027e\001\002\000\004\112\u02d3\001\002\000" +
    "\004\100\u02d4\001\002\000\006\014\uffdc\126\uffdc\001\002" +
    "\000\010\014\uffd6\071\u02da\103\u02d9\001\002\000\004\014" +
    "\u02d7\001\002\000\004\100\u02d8\001\002\000\006\014\uffde" +
    "\126\uffde\001\002\000\004\137\u02df\001\002\000\004\071" +
    "\u02db\001\002\000\004\137\u02dc\001\002\000\004\014\u02dd" +
    "\001\002\000\004\100\u02de\001\002\000\006\014\uffdd\126" +
    "\uffdd\001\002\000\006\014\uffd6\103\u02d9\001\002\000\004" +
    "\014\uffd5\001\002\000\006\014\uffe0\126\uffe0\001\002\000" +
    "\004\014\uffe1\001\002\000\004\100\u02e4\001\002\000\026" +
    "\010\uffe3\014\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\026" +
    "\uffe3\040\uffe3\135\uffe3\136\uffe3\001\002\000\004\002\ufffe" +
    "\001\002\000\004\013\u02e7\001\002\000\004\004\u02e8\001" +
    "\002\000\004\116\u02e9\001\002\000\004\126\u02ea\001\002" +
    "\000\004\100\u02eb\001\002\000\006\010\u02ec\030\u02ed\001" +
    "\002\000\004\013\u02f1\001\002\000\006\047\031\126\033" +
    "\001\002\000\004\100\u02ef\001\002\000\004\014\u02f0\001" +
    "\002\000\012\002\uff2e\004\uff2e\005\uff2e\030\uff2e\001\002" +
    "\000\004\126\u016d\001\002\000\004\014\u02f3\001\002\000" +
    "\004\100\u02f4\001\002\000\004\030\u02f5\001\002\000\004" +
    "\013\u02f6\001\002\000\006\047\031\126\033\001\002\000" +
    "\004\014\u02f8\001\002\000\004\100\u02f9\001\002\000\004" +
    "\014\u02fa\001\002\000\012\002\uff2f\004\uff2f\005\uff2f\030" +
    "\uff2f\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u02f9\000\012\003\007\004\003\006\011\007\005\001" +
    "\001\000\012\003\u02fa\004\003\006\011\007\005\001\001" +
    "\000\002\001\001\000\012\003\u02e4\004\003\006\011\007" +
    "\005\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\003\012\004\003\006\011\007\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\056\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\063\033\064\031\001\001\000\002" +
    "\001\001\000\006\063\152\064\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\056\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\055\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\056\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\052\150\053\120\054\104\057\107\001\001\000\006" +
    "\065\065\066\066\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\065\074\066\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\052\116\053\120\054\104\057\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\014\143\015\122\066" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\014\124\015\122\066" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\052\127\053\120\054" +
    "\104\057\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\052\133\053\120\054\104\057" +
    "\107\001\001\000\002\001\001\000\006\015\135\066\123" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\014" +
    "\140\015\122\066\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\065\156\066\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\055\163\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\061\213\062\202\001\001\000\002\001" +
    "\001\000\004\047\u0119\001\001\000\006\061\213\062\u013b" +
    "\001\001\000\002\001\001\000\006\061\213\062\u0137\001" +
    "\001\000\006\061\213\062\u0135\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\061\213\062\372\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\061\213\062\323\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\030\225\066\226\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\061\213\062\230\001\001\000\002" +
    "\001\001\000\006\061\213\062\271\001\001\000\006\061" +
    "\213\062\270\001\001\000\006\061\213\062\267\001\001" +
    "\000\006\061\213\062\266\001\001\000\006\061\213\062" +
    "\265\001\001\000\006\061\213\062\253\001\001\000\006" +
    "\061\213\062\264\001\001\000\006\061\213\062\263\001" +
    "\001\000\006\061\213\062\262\001\001\000\006\061\213" +
    "\062\261\001\001\000\006\030\260\066\226\001\001\000" +
    "\006\061\213\062\257\001\001\000\006\061\213\062\256" +
    "\001\001\000\006\061\213\062\255\001\001\000\006\061" +
    "\213\062\254\001\001\000\006\061\213\062\251\001\001" +
    "\000\002\001\001\000\006\061\213\062\253\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\061\213\062\273" +
    "\001\001\000\002\001\001\000\006\061\213\062\275\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\061\213" +
    "\062\300\001\001\000\002\001\001\000\006\061\213\062" +
    "\302\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\061\213\062\306\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\072\313" +
    "\073\314\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\072\316\073\314\001\001\000\002" +
    "\001\001\000\006\061\213\062\320\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\061\213\062" +
    "\327\001\001\000\002\001\001\000\006\066\331\074\332" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\061\213\062\336\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\066\331\074\340\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\066\331\074\344\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\061\213\062\347\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\061\213\062\354\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\061\213\062\357\001\001\000\002\001" +
    "\001\000\006\061\213\062\361\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\061\213\062" +
    "\365\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\061\213\062\370\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\061\213" +
    "\062\375\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\061\213\062\u0100\001\001\000\002\001\001\000\006" +
    "\061\213\062\u0102\001\001\000\002\001\001\000\006\061" +
    "\u0105\070\u0108\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\047\u0119\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\075\u010f\076\u010e\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\061\u0105\070\u0111" +
    "\001\001\000\002\001\001\000\006\061\213\062\u0113\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\075\u0116" +
    "\076\u010e\001\001\000\002\001\001\000\006\061\213\062" +
    "\u0118\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\061\u0105\067\u012a\070\u012b\001\001\000\004\071\u011e\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\047\u0128" +
    "\001\001\000\004\061\u0126\001\001\000\002\001\001\000" +
    "\004\061\u0124\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\071\u011e\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\061\u0105\067" +
    "\u012d\070\u012b\001\001\000\002\001\001\000\004\047\u012f" +
    "\001\001\000\002\001\001\000\006\061\213\062\u0131\001" +
    "\001\000\002\001\001\000\006\061\213\062\u0133\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\061\213\062\u0139" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\061\213\062\u013f\077\u013e" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\061" +
    "\213\062\u013f\077\u0141\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\072\u0144\073\314\001\001\000\002\001" +
    "\001\000\006\061\213\062\u0146\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\072\u0149\073\314\001\001\000" +
    "\002\001\001\000\006\061\213\062\u014b\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\056" +
    "\u0150\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\063\u0154\064\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\056\u0158" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\055\u0160\001" +
    "\001\000\002\001\001\000\004\056\u0162\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\045\u016b\050\u016a\001\001\000\006\045\u01a4\050" +
    "\u016a\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\u0170\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\044\u0174\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\044\u0178\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\056\u017c\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\063\u017f" +
    "\064\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\056\u0183\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\055\u018b\001\001\000\002\001\001\000\004\056\u018d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\055\u019b\001\001\000\002\001\001\000\004" +
    "\056\u019d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\055\u01ac\001" +
    "\001\000\002\001\001\000\004\056\u01ae\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\045\u01b6\050\u016a\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\056\u01ba\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\063\u01be\064\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\056\u01c2\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\055\u01ca\001\001\000\002\001\001\000\004" +
    "\056\u01cc\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\063\u01d4\064\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\063\u01d9\064\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\056\u01dd\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\061\213\062\u01e5\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\055\u01f3\001\001\000\002\001\001\000\004" +
    "\056\u01f5\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\055\u0203\001\001\000\002\001" +
    "\001\000\004\056\u0205\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\005\u021b\010\u0223\011\u0218\023" +
    "\u0220\026\u0221\032\u0214\033\u021c\036\u0216\041\u0213\046\u0210" +
    "\060\u0222\001\001\000\002\001\001\000\026\005\u02b8\011" +
    "\u0218\023\u0220\026\u0221\032\u0214\033\u021c\036\u0216\041\u0213" +
    "\046\u0210\060\u0222\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\005\u026c\011\u0218\023\u0220\026\u0221\032\u0214" +
    "\033\u021c\036\u0216\041\u0213\046\u0210\060\u0222\001\001\000" +
    "\026\005\u026b\011\u0218\023\u0220\026\u0221\032\u0214\033\u021c" +
    "\036\u0216\041\u0213\046\u0210\060\u0222\001\001\000\002\001" +
    "\001\000\026\005\u0260\011\u0218\023\u0220\026\u0221\032\u0214" +
    "\033\u021c\036\u0216\041\u0213\046\u0210\060\u0222\001\001\000" +
    "\002\001\001\000\026\005\u024f\011\u0218\023\u0220\026\u0221" +
    "\032\u0214\033\u021c\036\u0216\041\u0213\046\u0210\060\u0222\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\005\u0249\011\u0218\023\u0220\026\u0221\032\u0214\033" +
    "\u021c\036\u0216\041\u0213\046\u0210\060\u0222\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\005" +
    "\u0231\011\u0218\023\u0220\026\u0221\032\u0214\033\u021c\036\u0216" +
    "\041\u0213\046\u0210\060\u0222\001\001\000\026\005\u0230\011" +
    "\u0218\023\u0220\026\u0221\032\u0214\033\u021c\036\u0216\041\u0213" +
    "\046\u0210\060\u0222\001\001\000\002\001\001\000\026\005" +
    "\u0224\011\u0218\023\u0220\026\u0221\032\u0214\033\u021c\036\u0216" +
    "\041\u0213\046\u0210\060\u0222\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\027\u0229\031\u0228\061\u0227\001\001" +
    "\000\002\001\001\000\010\027\u022c\031\u0228\061\u0227\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\061\213\062\u022e\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\061\213\062\u0233\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\042\u0238\043\u0236\061\213" +
    "\062\u0239\001\001\000\012\042\u023e\043\u0236\061\213\062" +
    "\u0239\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\034\u0242" +
    "\035\u0243\061\213\062\u0241\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\034\u0244\035\u0243" +
    "\061\213\062\u0241\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\045\u024c\050" +
    "\u016a\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\051\u025b\001\001\000" +
    "\002\001\001\000\004\051\u0253\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\051\u0258\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\037\u0263\040\u0265\061\213\062\u0264\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\037\u0266\040\u0265\061\213\062\u0264\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\024\u026e\025\u0270\001\001\000\002\001\001" +
    "\000\004\016\u0274\001\001\000\006\024\u0271\025\u0270\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\017\u02b1" +
    "\021\u02b0\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\u027e\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\u0285\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\052" +
    "\u0289\053\120\054\104\057\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\u028d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\052\u0291\053\120\054\104\057\107\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\u0295\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\u029f\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\052\u02a3\053\120\054" +
    "\104\057\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\u02a7\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\u02b5\021\u02b0\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\013\u02ba\022" +
    "\u02bb\001\001\000\002\001\001\000\006\013\u02e1\022\u02bb" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\u02d5\001\001\000\002\001\001\000\006" +
    "\020\u02c5\066\u02c4\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\u02c9\001\001\000\002\001" +
    "\001\000\006\020\u02cb\066\u02c4\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\u02d1\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\u02df\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\063\u02ed\064\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\045\u02f1" +
    "\050\u016a\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\063\u02f6\064\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	
	// Just a testing interface (loads formula from file)
	public static void main(String args[]) throws Exception {
	    if (args.length == 0 || args.length > 2) 
			usageAndExit();
	    else if (args.length == 2 && args[1].equalsIgnoreCase("-prefix-output"))
	    	RDDL.USE_PREFIX = true; // Set prefix output
	    else if (args.length == 2) {
	    	System.out.println("Unrecognized option: " + args[1]);
	    	usageAndExit();
	    }
		RDDL rddl = parse(new File(args[0]));
		System.out.println(rddl);
    }

	public static void usageAndExit() {
		System.out.println("Usage: RDDL-filename [-prefix-output]");
	    System.exit(1);	
	}

	// The main runtime method to call
	public static RDDL parse(String s) 
 		throws ParseException {

            Yylex  lex  = null;
		    Symbol rval = null;
            parser p = null;
	        try {
	           lex = new Yylex(new StringReader(s));
	           p = new parser(lex);
		       rval = p.parse();

            } catch (Exception e) {
               int cur_line = (lex != null) ? lex.yyline() + 1 : -1;
               String cur_token = "[NOT AVAILABLE]";
               try {
            	   cur_token = "#" + p.cur_token.sym + ": '" + p.cur_token.value + "'";
               } catch (Exception e2) { /* discard */ }
               String next_token = "[NOT AVAILABLE]";
               try {
                  Symbol s2 = lex.next_token();
                  next_token = "#" + s2.sym + ": '" + s2.value + "'";
               } catch (Exception e2) { /* discard */ }
	           System.out.println("Error on line " + 
				      ((lex != null) ? ""+ cur_line + ", cur token: " + cur_token + ", next token: " + next_token : "") 
	 			      + "\nException: " + e);
		       //e.printStackTrace();
            }

            return (RDDL)rval.value;		
	}

	// The main runtime method to call
	public static RDDL parse(File f) 
 		throws Exception {

            Yylex  lex  = null;
		    Symbol rval = null;
            parser p = null;
	        try {
	           lex = new Yylex(new FileInputStream(f));
	           p = new parser(lex);
		       rval = p.parse();

            } catch (FileNotFoundException fne) {
            	System.out.println("ERROR: Could not find file: '" + f + "'");
            } catch (Exception e) {
               int cur_line = (lex != null) ? lex.yyline() + 1 : -1;
               String cur_token = "[NOT AVAILABLE]";
               try {
            	   cur_token = "#" + p.cur_token.sym + ": '" + p.cur_token.value + "'";
               } catch (Exception e2) { /* discard */ }
               String next_token = "[NOT AVAILABLE]";
               try {
                  Symbol s2 = lex.next_token();
                  next_token = "#" + s2.sym + ": '" + s2.value + "'";
               } catch (Exception e2) { /* discard */ }
	           System.out.println("Error on line " + 
				      ((lex != null) ? ""+ cur_line + ", cur token: " + cur_token + ", next token: " + next_token : "?") 
	 			      + "\nException: " + e);
		       //e.printStackTrace();
            }

            return (RDDL)rval.value;		
	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // INSTANCE_BLOCK ::= INSTANCE IDENT LCURLY DOMAIN ASSIGN_EQUAL IDENT SEMI OBJECTS LCURLY OBJECTS_LIST RCURLY SEMI NON_FLUENTS LCURLY PVAR_INST_LIST RCURLY SEMI INIT_STATE LCURLY PVAR_INST_LIST RCURLY SEMI TERMINAL ASSIGN_EQUAL EXPR SEMI DISCOUNT ASSIGN_EQUAL DOUBLE SEMI RCURLY 
            {
              RDDL.INSTANCE RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-29)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-29)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-29)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-25)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-25)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-25)).value;
		int objectsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)).left;
		int objectsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)).right;
		ArrayList objects = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-21)).value;
		int nonfluents_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)).left;
		int nonfluents_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)).right;
		ArrayList nonfluents_list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-16)).value;
		int state_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int state_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		ArrayList state_list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		RDDL.EXPR expr = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.INSTANCE(name,domain,null,nonfluents_list,objects,state_list,null,expr,d); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*INSTANCE_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-30)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // INSTANCE_BLOCK ::= INSTANCE IDENT LCURLY DOMAIN ASSIGN_EQUAL IDENT SEMI OBJECTS LCURLY OBJECTS_LIST RCURLY SEMI NON_FLUENTS LCURLY PVAR_INST_LIST RCURLY SEMI INIT_STATE LCURLY PVAR_INST_LIST RCURLY SEMI HORIZON_SPEC SEMI DISCOUNT ASSIGN_EQUAL DOUBLE SEMI RCURLY 
            {
              RDDL.INSTANCE RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-27)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-27)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-27)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-23)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-23)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-23)).value;
		int objectsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-19)).left;
		int objectsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-19)).right;
		ArrayList objects = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-19)).value;
		int nonfluents_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).left;
		int nonfluents_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).right;
		ArrayList nonfluents_list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-14)).value;
		int state_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int state_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ArrayList state_list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.INSTANCE(name,domain,null,nonfluents_list,objects,state_list,null,h,d); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*INSTANCE_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-28)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // INSTANCE_BLOCK ::= INSTANCE IDENT LCURLY DOMAIN ASSIGN_EQUAL IDENT SEMI HORIZON_SPEC SEMI DISCOUNT ASSIGN_EQUAL DOUBLE SEMI RCURLY 
            {
              RDDL.INSTANCE RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.INSTANCE(name,domain,null,null,null,new ArrayList(),null,h,d); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*INSTANCE_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // INSTANCE_BLOCK ::= INSTANCE IDENT LCURLY DOMAIN ASSIGN_EQUAL IDENT SEMI NON_FLUENTS ASSIGN_EQUAL IDENT SEMI HORIZON_SPEC SEMI DISCOUNT ASSIGN_EQUAL DOUBLE SEMI RCURLY 
            {
              RDDL.INSTANCE RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-16)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int nonfluentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int nonfluentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String nonfluents = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.INSTANCE(name,domain,nonfluents,null,null,new ArrayList(),null,h,d); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*INSTANCE_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // INSTANCE_BLOCK ::= INSTANCE IDENT LCURLY DOMAIN ASSIGN_EQUAL IDENT SEMI OBJECTS LCURLY OBJECTS_LIST RCURLY SEMI HORIZON_SPEC SEMI DISCOUNT ASSIGN_EQUAL DOUBLE SEMI RCURLY 
            {
              RDDL.INSTANCE RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-17)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int objectsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int objectsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ArrayList objects = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.INSTANCE(name,domain,null,null,objects,new ArrayList(),null,h,d); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*INSTANCE_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // INSTANCE_BLOCK ::= INSTANCE IDENT LCURLY DOMAIN ASSIGN_EQUAL IDENT SEMI NON_FLUENTS ASSIGN_EQUAL IDENT SEMI OBJECTS LCURLY OBJECTS_LIST RCURLY SEMI HORIZON_SPEC SEMI DISCOUNT ASSIGN_EQUAL DOUBLE SEMI RCURLY 
            {
              RDDL.INSTANCE RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-21)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-17)).value;
		int nonfluentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int nonfluentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String nonfluents = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int objectsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int objectsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ArrayList objects = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.INSTANCE(name,domain,nonfluents,null,objects,new ArrayList(),null,h,d); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*INSTANCE_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-22)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // INSTANCE_BLOCK ::= INSTANCE IDENT LCURLY DOMAIN ASSIGN_EQUAL IDENT SEMI INIT_STATE LCURLY PVAR_INST_LIST RCURLY SEMI HORIZON_SPEC SEMI DISCOUNT ASSIGN_EQUAL DOUBLE SEMI RCURLY 
            {
              RDDL.INSTANCE RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-17)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int state_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int state_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ArrayList state_list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.INSTANCE(name,domain,null,null,null,state_list,null,h,d); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*INSTANCE_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // INSTANCE_BLOCK ::= INSTANCE IDENT LCURLY DOMAIN ASSIGN_EQUAL IDENT SEMI NON_FLUENTS ASSIGN_EQUAL IDENT SEMI INIT_STATE LCURLY PVAR_INST_LIST RCURLY SEMI HORIZON_SPEC SEMI DISCOUNT ASSIGN_EQUAL DOUBLE SEMI RCURLY 
            {
              RDDL.INSTANCE RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-21)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-17)).value;
		int nonfluentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int nonfluentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String nonfluents = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int state_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int state_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ArrayList state_list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.INSTANCE(name,domain,nonfluents,null,null,state_list,null,h,d); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*INSTANCE_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-22)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // INSTANCE_BLOCK ::= INSTANCE IDENT LCURLY DOMAIN ASSIGN_EQUAL IDENT SEMI OBJECTS LCURLY OBJECTS_LIST RCURLY SEMI INIT_STATE LCURLY PVAR_INST_LIST RCURLY SEMI HORIZON_SPEC SEMI DISCOUNT ASSIGN_EQUAL DOUBLE SEMI RCURLY 
            {
              RDDL.INSTANCE RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-22)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-22)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-22)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-18)).value;
		int objectsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).left;
		int objectsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).right;
		ArrayList objects = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-14)).value;
		int state_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int state_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ArrayList state_list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.INSTANCE(name,domain,null,null,objects,state_list,null,h,d); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*INSTANCE_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-23)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // INSTANCE_BLOCK ::= INSTANCE IDENT LCURLY DOMAIN ASSIGN_EQUAL IDENT SEMI NON_FLUENTS ASSIGN_EQUAL IDENT SEMI OBJECTS LCURLY OBJECTS_LIST RCURLY SEMI INIT_STATE LCURLY PVAR_INST_LIST RCURLY SEMI HORIZON_SPEC SEMI DISCOUNT ASSIGN_EQUAL DOUBLE SEMI RCURLY 
            {
              RDDL.INSTANCE RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-26)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-26)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-26)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-22)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-22)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-22)).value;
		int nonfluentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)).left;
		int nonfluentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)).right;
		String nonfluents = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-18)).value;
		int objectsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).left;
		int objectsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).right;
		ArrayList objects = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-14)).value;
		int state_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int state_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ArrayList state_list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.INSTANCE(name,domain,nonfluents,null,objects,state_list,null,h,d); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*INSTANCE_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-27)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // INSTANCE_BLOCK ::= INSTANCE IDENT LCURLY DOMAIN ASSIGN_EQUAL IDENT SEMI MAX_NONDEF_ACTIONS ASSIGN_EQUAL POS_INT_TYPE_OR_POS_INF SEMI HORIZON_SPEC SEMI DISCOUNT ASSIGN_EQUAL DOUBLE SEMI RCURLY 
            {
              RDDL.INSTANCE RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-16)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.INSTANCE(name,domain,null,null,null,new ArrayList(),a,h,d); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*INSTANCE_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // INSTANCE_BLOCK ::= INSTANCE IDENT LCURLY DOMAIN ASSIGN_EQUAL IDENT SEMI NON_FLUENTS ASSIGN_EQUAL IDENT SEMI MAX_NONDEF_ACTIONS ASSIGN_EQUAL POS_INT_TYPE_OR_POS_INF SEMI HORIZON_SPEC SEMI DISCOUNT ASSIGN_EQUAL DOUBLE SEMI RCURLY 
            {
              RDDL.INSTANCE RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-20)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-20)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-20)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-16)).value;
		int nonfluentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int nonfluentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String nonfluents = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.INSTANCE(name,domain,nonfluents,null,null,new ArrayList(),a,h,d); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*INSTANCE_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // INSTANCE_BLOCK ::= INSTANCE IDENT LCURLY DOMAIN ASSIGN_EQUAL IDENT SEMI OBJECTS LCURLY OBJECTS_LIST RCURLY SEMI MAX_NONDEF_ACTIONS ASSIGN_EQUAL POS_INT_TYPE_OR_POS_INF SEMI HORIZON_SPEC SEMI DISCOUNT ASSIGN_EQUAL DOUBLE SEMI RCURLY 
            {
              RDDL.INSTANCE RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-21)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-17)).value;
		int objectsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int objectsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		ArrayList objects = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.INSTANCE(name,domain,null,null,objects,new ArrayList(),a,h,d); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*INSTANCE_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-22)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // INSTANCE_BLOCK ::= INSTANCE IDENT LCURLY DOMAIN ASSIGN_EQUAL IDENT SEMI NON_FLUENTS ASSIGN_EQUAL IDENT SEMI OBJECTS LCURLY OBJECTS_LIST RCURLY SEMI MAX_NONDEF_ACTIONS ASSIGN_EQUAL POS_INT_TYPE_OR_POS_INF SEMI HORIZON_SPEC SEMI DISCOUNT ASSIGN_EQUAL DOUBLE SEMI RCURLY 
            {
              RDDL.INSTANCE RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-25)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-25)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-25)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-21)).value;
		int nonfluentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).left;
		int nonfluentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).right;
		String nonfluents = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-17)).value;
		int objectsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int objectsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		ArrayList objects = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.INSTANCE(name,domain,nonfluents,null,objects,new ArrayList(),a,h,d); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*INSTANCE_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-26)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // INSTANCE_BLOCK ::= INSTANCE IDENT LCURLY DOMAIN ASSIGN_EQUAL IDENT SEMI INIT_STATE LCURLY PVAR_INST_LIST RCURLY SEMI MAX_NONDEF_ACTIONS ASSIGN_EQUAL POS_INT_TYPE_OR_POS_INF SEMI HORIZON_SPEC SEMI DISCOUNT ASSIGN_EQUAL DOUBLE SEMI RCURLY 
            {
              RDDL.INSTANCE RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-21)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-17)).value;
		int state_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int state_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		ArrayList state_list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.INSTANCE(name,domain,null,null,null,state_list,a,h,d); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*INSTANCE_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-22)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // INSTANCE_BLOCK ::= INSTANCE IDENT LCURLY DOMAIN ASSIGN_EQUAL IDENT SEMI NON_FLUENTS ASSIGN_EQUAL IDENT SEMI INIT_STATE LCURLY PVAR_INST_LIST RCURLY SEMI MAX_NONDEF_ACTIONS ASSIGN_EQUAL POS_INT_TYPE_OR_POS_INF SEMI HORIZON_SPEC SEMI DISCOUNT ASSIGN_EQUAL DOUBLE SEMI RCURLY 
            {
              RDDL.INSTANCE RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-25)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-25)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-25)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-21)).value;
		int nonfluentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).left;
		int nonfluentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).right;
		String nonfluents = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-17)).value;
		int state_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int state_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		ArrayList state_list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.INSTANCE(name,domain,nonfluents,null,null,state_list,a,h,d); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*INSTANCE_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-26)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // INSTANCE_BLOCK ::= INSTANCE IDENT LCURLY DOMAIN ASSIGN_EQUAL IDENT SEMI OBJECTS LCURLY OBJECTS_LIST RCURLY SEMI INIT_STATE LCURLY PVAR_INST_LIST RCURLY SEMI MAX_NONDEF_ACTIONS ASSIGN_EQUAL POS_INT_TYPE_OR_POS_INF SEMI HORIZON_SPEC SEMI DISCOUNT ASSIGN_EQUAL DOUBLE SEMI RCURLY 
            {
              RDDL.INSTANCE RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-26)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-26)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-26)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-22)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-22)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-22)).value;
		int objectsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)).left;
		int objectsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)).right;
		ArrayList objects = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-18)).value;
		int state_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int state_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		ArrayList state_list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.INSTANCE(name,domain,null,null,objects,state_list,a,h,d); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*INSTANCE_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-27)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // INSTANCE_BLOCK ::= INSTANCE IDENT LCURLY DOMAIN ASSIGN_EQUAL IDENT SEMI NON_FLUENTS ASSIGN_EQUAL IDENT SEMI OBJECTS LCURLY OBJECTS_LIST RCURLY SEMI INIT_STATE LCURLY PVAR_INST_LIST RCURLY SEMI MAX_NONDEF_ACTIONS ASSIGN_EQUAL POS_INT_TYPE_OR_POS_INF SEMI HORIZON_SPEC SEMI DISCOUNT ASSIGN_EQUAL DOUBLE SEMI RCURLY 
            {
              RDDL.INSTANCE RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-30)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-30)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-30)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-26)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-26)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-26)).value;
		int nonfluentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-22)).left;
		int nonfluentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-22)).right;
		String nonfluents = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-22)).value;
		int objectsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)).left;
		int objectsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)).right;
		ArrayList objects = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-18)).value;
		int state_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int state_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		ArrayList state_list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.INSTANCE(name,domain,nonfluents,null,objects,state_list,a,h,d); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*INSTANCE_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-31)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // NONFLUENT_BLOCK ::= NON_FLUENTS IDENT LCURLY DOMAIN ASSIGN_EQUAL IDENT SEMI NON_FLUENTS PVAR_INST_LIST SEMI RCURLY 
            {
              RDDL.NONFLUENTS RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nonfluents_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nonfluents_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList nonfluents_list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.NONFLUENTS(name,domain,null,nonfluents_list); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*NONFLUENT_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // NONFLUENT_BLOCK ::= NON_FLUENTS IDENT LCURLY DOMAIN ASSIGN_EQUAL IDENT SEMI OBJECTS LCURLY OBJECTS_LIST RCURLY SEMI NON_FLUENTS LCURLY PVAR_INST_LIST RCURLY SEMI RCURLY 
            {
              RDDL.NONFLUENTS RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-16)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int objectsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int objectsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ArrayList objects = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int nonfluents_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nonfluents_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList nonfluents_list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new RDDL.NONFLUENTS(name,domain,objects,nonfluents_list); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*NONFLUENT_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // EXPR ::= GAMMA LPAREN EXPR COMMA EXPR RPAREN 
            {
              RDDL.EXPR RESULT = null;
		int shapeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int shaperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		RDDL.EXPR shape = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int scaleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int scaleright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR scale = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.Gamma(shape, scale); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // EXPR ::= WEIBULL LPAREN EXPR COMMA EXPR RPAREN 
            {
              RDDL.EXPR RESULT = null;
		int shapeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int shaperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		RDDL.EXPR shape = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int scaleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int scaleright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR scale = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.Weibull(shape, scale); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // EXPR ::= POISSON LPAREN EXPR RPAREN 
            {
              RDDL.EXPR RESULT = null;
		int lambdaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lambdaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR lambda = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.Poisson(lambda); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // EXPR ::= DIRICHLET LPAREN IDENT COMMA EXPR RPAREN 
            {
              RDDL.EXPR RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int alphaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int alpharight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR alpha = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.Dirichlet(type, alpha); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // EXPR ::= MULTINOMIAL LPAREN IDENT COMMA EXPR COMMA LCONST_CASE_LIST RPAREN 
            {
              RDDL.EXPR RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int countleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int countright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		RDDL.EXPR count = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.Multinomial(type, count, list); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // EXPR ::= DISCRETE LPAREN IDENT COMMA LCONST_CASE_LIST RPAREN 
            {
              RDDL.EXPR RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.Discrete(type, list); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // EXPR ::= EXPONENTIAL LPAREN EXPR RPAREN 
            {
              RDDL.EXPR RESULT = null;
		int lambdaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lambdaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR lambda = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.Exponential(lambda); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // EXPR ::= NORMAL LPAREN EXPR COMMA EXPR RPAREN 
            {
              RDDL.EXPR RESULT = null;
		int muleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int muright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		RDDL.EXPR mu = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR var = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.Normal(mu, var); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // EXPR ::= UNIFORM LPAREN EXPR COMMA EXPR RPAREN 
            {
              RDDL.EXPR RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		RDDL.EXPR l = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR u = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.Uniform(l,u); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // EXPR ::= KRON_DELTA LPAREN EXPR RPAREN 
            {
              RDDL.EXPR RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR k = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.KronDelta(k); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // EXPR ::= DIRAC_DELTA LPAREN EXPR RPAREN 
            {
              RDDL.EXPR RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR d = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.DiracDelta(d); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // EXPR ::= BERNOULLI LPAREN EXPR RPAREN 
            {
              RDDL.EXPR RESULT = null;
		int probleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int probright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR prob = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.Bernoulli(prob); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // EXPR ::= SWITCH LPAREN TERM RPAREN LCURLY CASE_LIST RCURLY 
            {
              RDDL.EXPR RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		RDDL.LTERM t = (RDDL.LTERM)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.SWITCH_EXPR(t, list); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // EXPR ::= IF LPAREN EXPR RPAREN THEN EXPR ELSE EXPR 
            {
              RDDL.EXPR RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		RDDL.EXPR b = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR e1 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e2 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.IF_EXPR(b, e1, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // EXPR ::= IDENT UNDERSCORE LCURLY TYPED_VAR_LIST RCURLY EXPR 
            {
              RDDL.EXPR RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.AGG_EXPR(i, list, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // EXPR ::= EXPR MINUS EXPR 
            {
              RDDL.EXPR RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR e1 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e2 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.OPER_EXPR(e1, e2, "-"); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // EXPR ::= EXPR PLUS EXPR 
            {
              RDDL.EXPR RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR e1 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e2 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.OPER_EXPR(e1, e2, "+"); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // EXPR ::= EXPR DIV EXPR 
            {
              RDDL.EXPR RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR e1 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e2 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.OPER_EXPR(e1, e2, "/"); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // EXPR ::= EXPR TIMES EXPR 
            {
              RDDL.EXPR RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR e1 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e2 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.OPER_EXPR(e1, e2, "*"); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // EXPR ::= MINUS EXPR 
            {
              RDDL.EXPR RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.OPER_EXPR(new RDDL.INT_CONST_EXPR(0), e, "-"); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // EXPR ::= PLUS EXPR 
            {
              RDDL.EXPR RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // EXPR ::= DOUBLE 
            {
              RDDL.EXPR RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.REAL_CONST_EXPR(d); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // EXPR ::= INTEGER 
            {
              RDDL.EXPR RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.INT_CONST_EXPR(i); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // EXPR ::= EXISTS UNDERSCORE LCURLY TYPED_VAR_LIST RCURLY EXPR 
            {
              RDDL.EXPR RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR b = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.QUANT_EXPR("exists", list, b); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // EXPR ::= FORALL UNDERSCORE LCURLY TYPED_VAR_LIST RCURLY EXPR 
            {
              RDDL.EXPR RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR b = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.QUANT_EXPR("forall", list, b); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // EXPR ::= EXPR EQUIV EXPR 
            {
              RDDL.EXPR RESULT = null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR b1 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR b2 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.CONN_EXPR(b1, b2, "<=>"); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // EXPR ::= EXPR IMPLY EXPR 
            {
              RDDL.EXPR RESULT = null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR b1 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR b2 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.CONN_EXPR(b1, b2, "=>"); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // EXPR ::= EXPR OR EXPR 
            {
              RDDL.EXPR RESULT = null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR b1 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR b2 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.CONN_EXPR(b1, b2, "|"); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // EXPR ::= EXPR AMPERSAND EXPR 
            {
              RDDL.EXPR RESULT = null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR b1 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR b2 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.CONN_EXPR(b1, b2, "^"); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // EXPR ::= EXPR AND EXPR 
            {
              RDDL.EXPR RESULT = null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR b1 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR b2 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.CONN_EXPR(b1, b2, "^"); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // EXPR ::= NOT EXPR 
            {
              RDDL.EXPR RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR b = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.NEG_EXPR(b); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // EXPR ::= EXPR LESSEQ EXPR 
            {
              RDDL.EXPR RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR e1 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e2 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.COMP_EXPR(e1, e2, "<="); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // EXPR ::= EXPR LESS EXPR 
            {
              RDDL.EXPR RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR e1 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e2 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.COMP_EXPR(e1, e2, "<"); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // EXPR ::= EXPR GREATEREQ EXPR 
            {
              RDDL.EXPR RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR e1 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e2 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.COMP_EXPR(e1, e2, ">="); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // EXPR ::= EXPR GREATER EXPR 
            {
              RDDL.EXPR RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR e1 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e2 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.COMP_EXPR(e1, e2, ">"); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // EXPR ::= EXPR NEQ EXPR 
            {
              RDDL.EXPR RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR e1 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e2 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.COMP_EXPR(e1, e2, "~="); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // EXPR ::= EXPR COMP_EQUAL EXPR 
            {
              RDDL.EXPR RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR e1 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e2 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.COMP_EXPR(e1, e2, "=="); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // EXPR ::= FALSE 
            {
              RDDL.EXPR RESULT = null;
		 RESULT = new RDDL.BOOL_CONST_EXPR(false); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // EXPR ::= TRUE 
            {
              RDDL.EXPR RESULT = null;
		 RESULT = new RDDL.BOOL_CONST_EXPR(true); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // EXPR ::= IDENT LBRACK EXPR_LIST RBRACK 
            {
              RDDL.EXPR RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList l = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.FUN_EXPR(i, l); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // EXPR ::= LPAREN EXPR RPAREN 
            {
              RDDL.EXPR RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR e = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // EXPR ::= LBRACK EXPR RBRACK 
            {
              RDDL.EXPR RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR e = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // EXPR ::= LESS STRUCT_EXPR_LIST 
            {
              RDDL.EXPR RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.STRUCT_EXPR s = (RDDL.STRUCT_EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // EXPR ::= DOLLAR_SIGN IDENT 
            {
              RDDL.EXPR RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.OBJECT_VAL(i); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // EXPR ::= ENUM_VAL 
            {
              RDDL.EXPR RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.ENUM_VAL(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // EXPR ::= PVAR_EXPR 
            {
              RDDL.EXPR RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.PVAR_EXPR p = (RDDL.PVAR_EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p; 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // EXPR ::= VAR 
            {
              RDDL.EXPR RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.LVAR(v); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // CASE_DEF ::= DEFAULT COLON EXPR 
            {
              RDDL.CASE RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.CASE(null,e); 
              CUP$parser$result = new java_cup.runtime.Symbol(60/*CASE_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // CASE_DEF ::= CASE TERM COLON EXPR 
            {
              RDDL.CASE RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.LTERM v = (RDDL.LTERM)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.CASE(v,e); 
              CUP$parser$result = new java_cup.runtime.Symbol(60/*CASE_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // CASE_LIST ::= CASE_DEF COMMA CASE_LIST 
            {
              ArrayList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.CASE e = (RDDL.CASE)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,e); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(59/*CASE_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // CASE_LIST ::= CASE_DEF 
            {
              ArrayList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.CASE e = (RDDL.CASE)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {e})); 
              CUP$parser$result = new java_cup.runtime.Symbol(59/*CASE_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // EXPR_LIST ::= EXPR COMMA EXPR_LIST 
            {
              ArrayList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR e = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,e); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(61/*EXPR_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // EXPR_LIST ::= EXPR 
            {
              ArrayList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {e})); 
              CUP$parser$result = new java_cup.runtime.Symbol(61/*EXPR_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // LCONST_CASE_LIST ::= LCONST COLON EXPR COMMA LCONST_CASE_LIST 
            {
              ArrayList RESULT = null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		RDDL.LCONST label = (RDDL.LCONST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR e = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,e); list.add(0,label); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(58/*LCONST_CASE_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // LCONST_CASE_LIST ::= LCONST COLON OTHERWISE 
            {
              ArrayList RESULT = null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.LCONST label = (RDDL.LCONST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {label, RDDL.Discrete.OTHERWISE_CASE})); 
              CUP$parser$result = new java_cup.runtime.Symbol(58/*LCONST_CASE_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // LCONST_CASE_LIST ::= LCONST COLON EXPR 
            {
              ArrayList RESULT = null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.LCONST label = (RDDL.LCONST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {label,e})); 
              CUP$parser$result = new java_cup.runtime.Symbol(58/*LCONST_CASE_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // TYPED_VAR ::= VAR COLON IDENT 
            {
              RDDL.LTYPED_VAR RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.LTYPED_VAR(var, type); 
              CUP$parser$result = new java_cup.runtime.Symbol(57/*TYPED_VAR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // TYPED_VAR_LIST ::= TYPED_VAR COMMA TYPED_VAR_LIST 
            {
              ArrayList RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.LTYPED_VAR t = (RDDL.LTYPED_VAR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,t); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(56/*TYPED_VAR_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // TYPED_VAR_LIST ::= TYPED_VAR 
            {
              ArrayList RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.LTYPED_VAR t = (RDDL.LTYPED_VAR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {t})); 
              CUP$parser$result = new java_cup.runtime.Symbol(56/*TYPED_VAR_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // STRUCT_EXPR_LIST ::= LCONST COLON EXPR COMMA STRUCT_EXPR_LIST 
            {
              RDDL.STRUCT_EXPR RESULT = null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		RDDL.LCONST label = (RDDL.LCONST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR e = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.STRUCT_EXPR s = (RDDL.STRUCT_EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 s.addMemberAsFirst(label, e); RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*STRUCT_EXPR_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // STRUCT_EXPR_LIST ::= LCONST COLON EXPR GREATER 
            {
              RDDL.STRUCT_EXPR RESULT = null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		RDDL.LCONST label = (RDDL.LCONST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR e = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.STRUCT_EXPR(label, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*STRUCT_EXPR_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // TERM_LIST ::= TERM COMMA TERM_LIST 
            {
              ArrayList RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.LTERM t = (RDDL.LTERM)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,t); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(53/*TERM_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // TERM_LIST ::= TERM 
            {
              ArrayList RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.LTERM t = (RDDL.LTERM)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {t})); 
              CUP$parser$result = new java_cup.runtime.Symbol(53/*TERM_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // MEMBER_LIST ::= DOT PTERM MEMBER_LIST 
            {
              ArrayList RESULT = null;
		int memberleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int memberright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.LTERM member = (RDDL.LTERM)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,member); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*MEMBER_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // MEMBER_LIST ::= DOT PTERM 
            {
              ArrayList RESULT = null;
		int memberleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int memberright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.LTERM member = (RDDL.LTERM)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {member})); 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*MEMBER_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // PTERM ::= DOLLAR_SIGN IDENT 
            {
              RDDL.LTERM RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.OBJECT_VAL(i); 
              CUP$parser$result = new java_cup.runtime.Symbol(55/*PTERM*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // PTERM ::= ENUM_VAL 
            {
              RDDL.LTERM RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.ENUM_VAL(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(55/*PTERM*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // PTERM ::= LBRACK PVAR_EXPR RBRACK 
            {
              RDDL.LTERM RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.PVAR_EXPR p = (RDDL.PVAR_EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.TVAR_EXPR(p); 
              CUP$parser$result = new java_cup.runtime.Symbol(55/*PTERM*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // PTERM ::= LPAREN PVAR_EXPR RPAREN 
            {
              RDDL.LTERM RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.PVAR_EXPR p = (RDDL.PVAR_EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.TVAR_EXPR(p); 
              CUP$parser$result = new java_cup.runtime.Symbol(55/*PTERM*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // PTERM ::= VAR 
            {
              RDDL.LTERM RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.LVAR(v); 
              CUP$parser$result = new java_cup.runtime.Symbol(55/*PTERM*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // PVAR_EXPR ::= IDENT DOT DEFAULT 
            {
              RDDL.PVAR_EXPR RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.PVAR_EXPR(i, new ArrayList(), new ArrayList(Arrays.asList(new Object[] {RDDL.PVAR_EXPR.DEFAULT}))); 
              CUP$parser$result = new java_cup.runtime.Symbol(47/*PVAR_EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // PVAR_EXPR ::= IDENT MEMBER_LIST 
            {
              RDDL.PVAR_EXPR RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.PVAR_EXPR(i, new ArrayList(), list); 
              CUP$parser$result = new java_cup.runtime.Symbol(47/*PVAR_EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // PVAR_EXPR ::= IDENT 
            {
              RDDL.PVAR_EXPR RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.PVAR_EXPR(i, new ArrayList()); 
              CUP$parser$result = new java_cup.runtime.Symbol(47/*PVAR_EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // PVAR_EXPR ::= IDENT LPAREN TERM_LIST RPAREN MEMBER_LIST 
            {
              RDDL.PVAR_EXPR RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList l = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.PVAR_EXPR(i, l, list); 
              CUP$parser$result = new java_cup.runtime.Symbol(47/*PVAR_EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // PVAR_EXPR ::= IDENT LPAREN TERM_LIST RPAREN 
            {
              RDDL.PVAR_EXPR RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList l = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.PVAR_EXPR(i, l); 
              CUP$parser$result = new java_cup.runtime.Symbol(47/*PVAR_EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // TERM ::= DOLLAR_SIGN IDENT 
            {
              RDDL.LTERM RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.OBJECT_VAL(i); 
              CUP$parser$result = new java_cup.runtime.Symbol(54/*TERM*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // TERM ::= ENUM_VAL 
            {
              RDDL.LTERM RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.ENUM_VAL(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(54/*TERM*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // TERM ::= PVAR_EXPR 
            {
              RDDL.LTERM RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.PVAR_EXPR p = (RDDL.PVAR_EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.TVAR_EXPR(p); 
              CUP$parser$result = new java_cup.runtime.Symbol(54/*TERM*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // TERM ::= VAR 
            {
              RDDL.LTERM RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.LVAR(v); 
              CUP$parser$result = new java_cup.runtime.Symbol(54/*TERM*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // LCONST ::= ENUM_VAL 
            {
              RDDL.LCONST RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.ENUM_VAL(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(52/*LCONST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // LCONST ::= DOLLAR_SIGN IDENT 
            {
              RDDL.LCONST RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.OBJECT_VAL(i); 
              CUP$parser$result = new java_cup.runtime.Symbol(52/*LCONST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // LCONST ::= IDENT 
            {
              RDDL.LCONST RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.OBJECT_VAL(i); 
              CUP$parser$result = new java_cup.runtime.Symbol(52/*LCONST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // LCONST_LIST ::= LCONST COMMA LCONST_LIST 
            {
              ArrayList RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.LCONST i = (RDDL.LCONST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,i); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(51/*LCONST_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // LCONST_LIST ::= LCONST 
            {
              ArrayList RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.LCONST i = (RDDL.LCONST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {i})); 
              CUP$parser$result = new java_cup.runtime.Symbol(51/*LCONST_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OBJECT_CONST_LIST ::= DOLLAR_SIGN IDENT COMMA OBJECT_CONST_LIST 
            {
              ArrayList RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,new RDDL.OBJECT_VAL(i)); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*OBJECT_CONST_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // OBJECT_CONST_LIST ::= DOLLAR_SIGN IDENT 
            {
              ArrayList RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {new RDDL.OBJECT_VAL(i)})); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*OBJECT_CONST_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // OBJECT_CONST_LIST ::= IDENT COMMA OBJECT_CONST_LIST 
            {
              ArrayList RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,new RDDL.OBJECT_VAL(i)); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*OBJECT_CONST_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // OBJECT_CONST_LIST ::= IDENT 
            {
              ArrayList RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {new RDDL.OBJECT_VAL(i)})); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*OBJECT_CONST_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // PVAR_INST_DEF ::= IDENT ASSIGN_EQUAL RANGE_CONST SEMI 
            {
              RDDL.PVAR_INST_DEF RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.PVAR_INST_DEF(i, val, new ArrayList()); 
              CUP$parser$result = new java_cup.runtime.Symbol(50/*PVAR_INST_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // PVAR_INST_DEF ::= IDENT LPAREN LCONST_LIST RPAREN ASSIGN_EQUAL RANGE_CONST SEMI 
            {
              RDDL.PVAR_INST_DEF RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.PVAR_INST_DEF(i, val, list); 
              CUP$parser$result = new java_cup.runtime.Symbol(50/*PVAR_INST_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // PVAR_INST_DEF ::= NOT IDENT SEMI 
            {
              RDDL.PVAR_INST_DEF RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.PVAR_INST_DEF(i, new Boolean(false), new ArrayList()); 
              CUP$parser$result = new java_cup.runtime.Symbol(50/*PVAR_INST_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // PVAR_INST_DEF ::= NOT IDENT LPAREN LCONST_LIST RPAREN SEMI 
            {
              RDDL.PVAR_INST_DEF RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.PVAR_INST_DEF(i, new Boolean(false), list); 
              CUP$parser$result = new java_cup.runtime.Symbol(50/*PVAR_INST_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // PVAR_INST_DEF ::= IDENT SEMI 
            {
              RDDL.PVAR_INST_DEF RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.PVAR_INST_DEF(i, new Boolean(true), new ArrayList()); 
              CUP$parser$result = new java_cup.runtime.Symbol(50/*PVAR_INST_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // PVAR_INST_DEF ::= IDENT LPAREN LCONST_LIST RPAREN SEMI 
            {
              RDDL.PVAR_INST_DEF RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.PVAR_INST_DEF(i, new Boolean(true), list); 
              CUP$parser$result = new java_cup.runtime.Symbol(50/*PVAR_INST_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // PVAR_INST_LIST ::= PVAR_INST_DEF PVAR_INST_LIST 
            {
              ArrayList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.PVAR_INST_DEF d = (RDDL.PVAR_INST_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,d); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(49/*PVAR_INST_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // PVAR_INST_LIST ::= PVAR_INST_DEF 
            {
              ArrayList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.PVAR_INST_DEF d = (RDDL.PVAR_INST_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {d})); 
              CUP$parser$result = new java_cup.runtime.Symbol(49/*PVAR_INST_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // OBJECTS_DEF ::= IDENT COLON LCURLY OBJECT_CONST_LIST RCURLY SEMI 
            {
              RDDL.OBJECTS_DEF RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList l = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.OBJECTS_DEF(i, l); 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*OBJECTS_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // OBJECTS_LIST ::= OBJECTS_DEF OBJECTS_LIST 
            {
              ArrayList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.OBJECTS_DEF d = (RDDL.OBJECTS_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,d); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(35/*OBJECTS_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // OBJECTS_LIST ::= OBJECTS_DEF 
            {
              ArrayList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.OBJECTS_DEF d = (RDDL.OBJECTS_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {d})); 
              CUP$parser$result = new java_cup.runtime.Symbol(35/*OBJECTS_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // STATE_INVARIANT_DEF ::= EXPR SEMI 
            {
              RDDL.STATE_INVARIANT_DEF RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR expr = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.STATE_INVARIANT_DEF(expr); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*STATE_INVARIANT_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // STATE_INVARIANT_LIST ::= STATE_INVARIANT_DEF STATE_INVARIANT_LIST 
            {
              ArrayList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.STATE_INVARIANT_DEF d = (RDDL.STATE_INVARIANT_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,d); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(32/*STATE_INVARIANT_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // STATE_INVARIANT_LIST ::= STATE_INVARIANT_DEF 
            {
              ArrayList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.STATE_INVARIANT_DEF d = (RDDL.STATE_INVARIANT_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {d})); 
              CUP$parser$result = new java_cup.runtime.Symbol(32/*STATE_INVARIANT_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // STATE_INVARIANT_SECTION ::= STATE_INVARIANTS LCURLY RCURLY SEMI 
            {
              ArrayList RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*STATE_INVARIANT_SECTION*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // STATE_INVARIANT_SECTION ::= STATE_INVARIANTS LCURLY STATE_INVARIANT_LIST RCURLY SEMI 
            {
              ArrayList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*STATE_INVARIANT_SECTION*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ACTION_PRECOND_DEF ::= EXPR SEMI 
            {
              RDDL.ACTION_PRECOND_DEF RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR expr = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.ACTION_PRECOND_DEF(expr); 
              CUP$parser$result = new java_cup.runtime.Symbol(30/*ACTION_PRECOND_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ACTION_PRECOND_LIST ::= ACTION_PRECOND_DEF ACTION_PRECOND_LIST 
            {
              ArrayList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.ACTION_PRECOND_DEF d = (RDDL.ACTION_PRECOND_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,d); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*ACTION_PRECOND_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ACTION_PRECOND_LIST ::= ACTION_PRECOND_DEF 
            {
              ArrayList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.ACTION_PRECOND_DEF d = (RDDL.ACTION_PRECOND_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {d})); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*ACTION_PRECOND_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ACTION_PRECOND_SECTION ::= ACTION_PRECONDITIONS LCURLY RCURLY SEMI 
            {
              ArrayList RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$parser$result = new java_cup.runtime.Symbol(28/*ACTION_PRECOND_SECTION*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ACTION_PRECOND_SECTION ::= ACTION_PRECONDITIONS LCURLY ACTION_PRECOND_LIST RCURLY SEMI 
            {
              ArrayList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(28/*ACTION_PRECOND_SECTION*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // STATE_CONS_DEF ::= EXPR SEMI 
            {
              RDDL.STATE_CONS_DEF RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR expr = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.STATE_CONS_DEF(expr); 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*STATE_CONS_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // STATE_CONS_LIST ::= STATE_CONS_DEF STATE_CONS_LIST 
            {
              ArrayList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.STATE_CONS_DEF d = (RDDL.STATE_CONS_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,d); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*STATE_CONS_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // STATE_CONS_LIST ::= STATE_CONS_DEF 
            {
              ArrayList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.STATE_CONS_DEF d = (RDDL.STATE_CONS_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {d})); 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*STATE_CONS_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // STATE_CONS_SECTION ::= STATE_ACTION_CONSTRAINTS LCURLY RCURLY SEMI 
            {
              ArrayList RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*STATE_CONS_SECTION*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // STATE_CONS_SECTION ::= STATE_ACTION_CONSTRAINTS LCURLY STATE_CONS_LIST RCURLY SEMI 
            {
              ArrayList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*STATE_CONS_SECTION*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // REW_SECTION ::= REWARD ASSIGN_EQUAL EXPR SEMI 
            {
              RDDL.REWARD_DEF RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR expr = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.REWARD_DEF(expr); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*REW_SECTION*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CPF_DEF ::= PVAR_EXPR ASSIGN_EQUAL EXPR SEMI 
            {
              RDDL.CPF_DEF RESULT = null;
		int pexprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pexprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		RDDL.PVAR_EXPR pexpr = (RDDL.PVAR_EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR expr = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.CPF_DEF(pexpr, expr); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*CPF_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CPF_LIST ::= CPF_DEF CPF_LIST 
            {
              ArrayList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.CPF_DEF d = (RDDL.CPF_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,d); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*CPF_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CPF_LIST ::= CPF_DEF 
            {
              ArrayList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.CPF_DEF d = (RDDL.CPF_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {d})); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*CPF_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CPF_HEADER ::= CDFS 
            {
              String RESULT = null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = ident; 
              CUP$parser$result = new java_cup.runtime.Symbol(46/*CPF_HEADER*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CPF_HEADER ::= CPFS 
            {
              String RESULT = null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = ident; 
              CUP$parser$result = new java_cup.runtime.Symbol(46/*CPF_HEADER*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CPF_SECTION ::= CPF_HEADER LCURLY CPF_LIST RCURLY SEMI 
            {
              ArrayList RESULT = null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 list.add(0,new RDDL.CPF_HEADER_NAME(ident)); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*CPF_SECTION*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // PVAR_DEF ::= IDENT PARAM_LIST LCURLY ACTION COMMA TYPE_SPEC COMMA DEFAULT ASSIGN_EQUAL RANGE_CONST RCURLY SEMI 
            {
              RDDL.PVARIABLE_DEF RESULT = null;
		int varnameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int varnameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String varname = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int rangeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int rangeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String range = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int defvalueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int defvalueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object defvalue = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.PVARIABLE_ACTION_DEF(varname, range, list, defvalue); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*PVAR_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // PVAR_DEF ::= IDENT PARAM_LIST LCURLY OBSERVATION COMMA TYPE_SPEC RCURLY SEMI 
            {
              RDDL.PVARIABLE_DEF RESULT = null;
		int varnameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int varnameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String varname = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int rangeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rangeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String range = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.PVARIABLE_OBS_DEF(varname, range, list); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*PVAR_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // PVAR_DEF ::= IDENT PARAM_LIST LCURLY DERIVED_FLUENT COMMA TYPE_SPEC RCURLY SEMI 
            {
              RDDL.PVARIABLE_DEF RESULT = null;
		int varnameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int varnameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String varname = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int rangeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rangeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String range = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.PVARIABLE_INTERM_DEF(varname, true /*derived*/, range, list, -1); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*PVAR_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // PVAR_DEF ::= IDENT PARAM_LIST LCURLY INTERMEDIATE COMMA TYPE_SPEC RCURLY SEMI 
            {
              RDDL.PVARIABLE_DEF RESULT = null;
		int varnameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int varnameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String varname = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int rangeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rangeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String range = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.PVARIABLE_INTERM_DEF(varname, false /*not derived*/, range, list, -1); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*PVAR_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // PVAR_DEF ::= IDENT PARAM_LIST LCURLY DERIVED_FLUENT COMMA TYPE_SPEC COMMA LEVEL ASSIGN_EQUAL INTEGER RCURLY SEMI 
            {
              RDDL.PVARIABLE_DEF RESULT = null;
		int varnameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int varnameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String varname = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int rangeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int rangeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String range = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int levelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int levelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer level = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.PVARIABLE_INTERM_DEF(varname, true /*derived*/, range, list, level); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*PVAR_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // PVAR_DEF ::= IDENT PARAM_LIST LCURLY INTERMEDIATE COMMA TYPE_SPEC COMMA LEVEL ASSIGN_EQUAL INTEGER RCURLY SEMI 
            {
              RDDL.PVARIABLE_DEF RESULT = null;
		int varnameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int varnameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String varname = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int rangeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int rangeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String range = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int levelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int levelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer level = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.PVARIABLE_INTERM_DEF(varname, false /*not derived*/, range, list, level); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*PVAR_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // PVAR_DEF ::= IDENT PARAM_LIST LCURLY NON_FLUENT COMMA TYPE_SPEC COMMA DEFAULT ASSIGN_EQUAL RANGE_CONST RCURLY SEMI 
            {
              RDDL.PVARIABLE_DEF RESULT = null;
		int varnameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int varnameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String varname = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int rangeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int rangeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String range = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int defvalueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int defvalueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object defvalue = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.PVARIABLE_STATE_DEF(varname, true, range, list, defvalue); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*PVAR_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // PVAR_DEF ::= IDENT PARAM_LIST LCURLY STATE COMMA TYPE_SPEC COMMA DEFAULT ASSIGN_EQUAL RANGE_CONST RCURLY SEMI 
            {
              RDDL.PVARIABLE_DEF RESULT = null;
		int varnameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int varnameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String varname = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int rangeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int rangeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String range = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int defvalueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int defvalueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object defvalue = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.PVARIABLE_STATE_DEF(varname, false, range, list, defvalue); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*PVAR_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // PVAR_LIST ::= PVAR_DEF PVAR_LIST 
            {
              ArrayList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.PVARIABLE_DEF d = (RDDL.PVARIABLE_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,d); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*PVAR_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // PVAR_LIST ::= PVAR_DEF 
            {
              ArrayList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.PVARIABLE_DEF d = (RDDL.PVARIABLE_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {d})); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*PVAR_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // PVAR_SECTION ::= PVARIABLES LCURLY PVAR_LIST RCURLY SEMI 
            {
              ArrayList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*PVAR_SECTION*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // TYPE_SPEC ::= BOOL 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*TYPE_SPEC*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // TYPE_SPEC ::= REAL 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*TYPE_SPEC*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // TYPE_SPEC ::= INT 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*TYPE_SPEC*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // TYPE_SPEC ::= IDENT 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*TYPE_SPEC*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // PARAM_LIST2 ::= TYPE_SPEC COMMA PARAM_LIST2 
            {
              ArrayList RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,t); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*PARAM_LIST2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // PARAM_LIST2 ::= TYPE_SPEC 
            {
              ArrayList RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {t})); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*PARAM_LIST2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PARAM_LIST ::= LPAREN PARAM_LIST2 RPAREN COLON 
            {
              ArrayList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*PARAM_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // PARAM_LIST ::= COLON 
            {
              ArrayList RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*PARAM_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // HORIZON_SPEC ::= HORIZON ASSIGN_EQUAL TERMINATE_WHEN LPAREN EXPR RPAREN 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR e = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(44/*HORIZON_SPEC*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // HORIZON_SPEC ::= HORIZON ASSIGN_EQUAL POS_INT_TYPE_OR_POS_INF 
            {
              Object RESULT = null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = h; 
              CUP$parser$result = new java_cup.runtime.Symbol(44/*HORIZON_SPEC*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // POS_INT_TYPE_OR_POS_INF ::= POS_INF 
            {
              Integer RESULT = null;
		 RESULT = new Integer(Integer.MAX_VALUE); 
              CUP$parser$result = new java_cup.runtime.Symbol(43/*POS_INT_TYPE_OR_POS_INF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // POS_INT_TYPE_OR_POS_INF ::= INTEGER 
            {
              Integer RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(43/*POS_INT_TYPE_OR_POS_INF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // INT_TYPE ::= MINUS INTEGER 
            {
              Integer RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Integer(-i.intValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(42/*INT_TYPE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // INT_TYPE ::= INTEGER 
            {
              Integer RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(42/*INT_TYPE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DOUBLE_TYPE ::= NEG_INF 
            {
              Double RESULT = null;
		 RESULT = new Double(Double.NEGATIVE_INFINITY); 
              CUP$parser$result = new java_cup.runtime.Symbol(45/*DOUBLE_TYPE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DOUBLE_TYPE ::= POS_INF 
            {
              Double RESULT = null;
		 RESULT = new Double(Double.POSITIVE_INFINITY); 
              CUP$parser$result = new java_cup.runtime.Symbol(45/*DOUBLE_TYPE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DOUBLE_TYPE ::= MINUS DOUBLE 
            {
              Double RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Double(-d.doubleValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(45/*DOUBLE_TYPE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DOUBLE_TYPE ::= DOUBLE 
            {
              Double RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = d; 
              CUP$parser$result = new java_cup.runtime.Symbol(45/*DOUBLE_TYPE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // BOOL_TYPE ::= FALSE 
            {
              Boolean RESULT = null;
		 RESULT = new Boolean(false); 
              CUP$parser$result = new java_cup.runtime.Symbol(41/*BOOL_TYPE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // BOOL_TYPE ::= TRUE 
            {
              Boolean RESULT = null;
		 RESULT = new Boolean(true); 
              CUP$parser$result = new java_cup.runtime.Symbol(41/*BOOL_TYPE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // STRUCT_RANGE_CONST2 ::= LCONST COLON RANGE_CONST COMMA STRUCT_RANGE_CONST2 
            {
              RDDL.STRUCT_VAL RESULT = null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		RDDL.LCONST label = (RDDL.LCONST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.STRUCT_VAL s = (RDDL.STRUCT_VAL)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 s.addMemberAsFirst(label, a); RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*STRUCT_RANGE_CONST2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // STRUCT_RANGE_CONST2 ::= LCONST COLON RANGE_CONST 
            {
              RDDL.STRUCT_VAL RESULT = null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.LCONST label = (RDDL.LCONST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.STRUCT_VAL(label, a); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*STRUCT_RANGE_CONST2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // STRUCT_RANGE_CONST ::= STRUCT_RANGE_CONST2 
            {
              RDDL.STRUCT_VAL RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.STRUCT_VAL v = (RDDL.STRUCT_VAL)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = v; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*STRUCT_RANGE_CONST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // STRUCT_RANGE_CONST ::= QUESTION COLON RANGE_CONST 
            {
              RDDL.STRUCT_VAL RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.STRUCT_VAL(a); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*STRUCT_RANGE_CONST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // RANGE_CONST ::= LBRACK LESS STRUCT_RANGE_CONST GREATER RBRACK 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.STRUCT_VAL s = (RDDL.STRUCT_VAL)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(40/*RANGE_CONST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // RANGE_CONST ::= LPAREN LESS STRUCT_RANGE_CONST GREATER RPAREN 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.STRUCT_VAL s = (RDDL.STRUCT_VAL)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(40/*RANGE_CONST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // RANGE_CONST ::= LESS STRUCT_RANGE_CONST GREATER 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.STRUCT_VAL s = (RDDL.STRUCT_VAL)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(40/*RANGE_CONST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // RANGE_CONST ::= ENUM_VAL 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.ENUM_VAL(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(40/*RANGE_CONST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // RANGE_CONST ::= DOLLAR_SIGN IDENT 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.OBJECT_VAL(i); 
              CUP$parser$result = new java_cup.runtime.Symbol(40/*RANGE_CONST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // RANGE_CONST ::= IDENT 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.OBJECT_VAL(i); 
              CUP$parser$result = new java_cup.runtime.Symbol(40/*RANGE_CONST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // RANGE_CONST ::= INT_TYPE 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = t; 
              CUP$parser$result = new java_cup.runtime.Symbol(40/*RANGE_CONST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // RANGE_CONST ::= DOUBLE_TYPE 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double t = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = t; 
              CUP$parser$result = new java_cup.runtime.Symbol(40/*RANGE_CONST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // RANGE_CONST ::= BOOL_TYPE 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean t = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = t; 
              CUP$parser$result = new java_cup.runtime.Symbol(40/*RANGE_CONST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ENUM_LIST ::= ENUM_VAL COMMA ENUM_LIST 
            {
              ArrayList RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,new RDDL.ENUM_VAL(i)); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*ENUM_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ENUM_LIST ::= ENUM_VAL 
            {
              ArrayList RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {new RDDL.ENUM_VAL(i)})); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*ENUM_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // STRING_LIST ::= IDENT COMMA STRING_LIST 
            {
              ArrayList RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,i); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(39/*STRING_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // STRING_LIST ::= IDENT 
            {
              ArrayList RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {i})); 
              CUP$parser$result = new java_cup.runtime.Symbol(39/*STRING_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // STRUCT_MEMBER_LIST ::= LCONST COLON TYPE_SPEC COMMA STRUCT_MEMBER_LIST 
            {
              ArrayList RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		RDDL.LCONST name = (RDDL.LCONST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0, new RDDL.STRUCT_TYPE_DEF_MEMBER(new RDDL.TYPE_NAME(t), name)); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*STRUCT_MEMBER_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // STRUCT_MEMBER_LIST ::= LCONST COLON TYPE_SPEC 
            {
              ArrayList RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.LCONST name = (RDDL.LCONST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] { new RDDL.STRUCT_TYPE_DEF_MEMBER(new RDDL.TYPE_NAME(t), name)})); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*STRUCT_MEMBER_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TYPE_DEF ::= IDENT COLON LESS STRUCT_MEMBER_LIST GREATER SEMI 
            {
              RDDL.TYPE_DEF RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int membersleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int membersright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList members = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.STRUCT_TYPE_DEF(i,members); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*TYPE_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TYPE_DEF ::= IDENT COLON LBRACK IDENT RBRACK LESS QUESTION COLON TYPE_SPEC GREATER SEMI 
            {
              RDDL.TYPE_DEF RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.STRUCT_TYPE_DEF(type,i,t); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*TYPE_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TYPE_DEF ::= IDENT COLON LCURLY ENUM_VAL DOT DOT ENUM_VAL RCURLY SEMI 
            {
              RDDL.TYPE_DEF RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int minleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int minright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String min = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int maxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int maxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String max = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.ENUM_TYPE_DEF(i,new RDDL.ENUM_VAL(min),new RDDL.ENUM_VAL(max)); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*TYPE_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TYPE_DEF ::= IDENT COLON LCURLY ENUM_LIST RCURLY SEMI 
            {
              RDDL.TYPE_DEF RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList el = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.ENUM_TYPE_DEF(i,el); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*TYPE_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TYPE_DEF ::= IDENT COLON IDENT SEMI 
            {
              RDDL.TYPE_DEF RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int superclassleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int superclassright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String superclass = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.OBJECT_TYPE_DEF(i, superclass); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*TYPE_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TYPE_DEF ::= IDENT COLON OBJECT SEMI 
            {
              RDDL.TYPE_DEF RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new RDDL.OBJECT_TYPE_DEF(i); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*TYPE_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TYPE_LIST ::= TYPE_DEF TYPE_LIST 
            {
              ArrayList RESULT = null;
		int defleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.TYPE_DEF def = (RDDL.TYPE_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,def); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*TYPE_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TYPE_LIST ::= TYPE_DEF 
            {
              ArrayList RESULT = null;
		int defleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.TYPE_DEF def = (RDDL.TYPE_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {def})); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*TYPE_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TYPE_SECTION ::= TYPES LCURLY TYPE_LIST RCURLY SEMI 
            {
              ArrayList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*TYPE_SECTION*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OBJECTS_SECTION ::= OBJECTS LCURLY OBJECTS_LIST RCURLY SEMI 
            {
              ArrayList RESULT = null;
		int objectsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int objectsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList objects = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = objects; 
              CUP$parser$result = new java_cup.runtime.Symbol(36/*OBJECTS_SECTION*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DOMAIN_LIST ::= OBJECTS_SECTION 
            {
              ArrayList RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList o = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = o; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*DOMAIN_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DOMAIN_LIST ::= STATE_INVARIANT_SECTION 
            {
              ArrayList RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList s = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*DOMAIN_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DOMAIN_LIST ::= ACTION_PRECOND_SECTION 
            {
              ArrayList RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList s = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*DOMAIN_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DOMAIN_LIST ::= STATE_CONS_SECTION 
            {
              ArrayList RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList s = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*DOMAIN_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DOMAIN_LIST ::= REW_SECTION 
            {
              ArrayList RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.REWARD_DEF r = (RDDL.REWARD_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {r})); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*DOMAIN_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DOMAIN_LIST ::= CPF_SECTION 
            {
              ArrayList RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList c = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = c; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*DOMAIN_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DOMAIN_LIST ::= PVAR_SECTION 
            {
              ArrayList RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList p = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*DOMAIN_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DOMAIN_LIST ::= TYPE_SECTION 
            {
              ArrayList RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList t = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = t; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*DOMAIN_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DOMAIN_LIST ::= OBJECTS_SECTION DOMAIN_LIST 
            {
              ArrayList RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList o = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.addAll(o); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*DOMAIN_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DOMAIN_LIST ::= STATE_INVARIANT_SECTION DOMAIN_LIST 
            {
              ArrayList RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList s = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.addAll(s); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*DOMAIN_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DOMAIN_LIST ::= ACTION_PRECOND_SECTION DOMAIN_LIST 
            {
              ArrayList RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList s = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.addAll(s); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*DOMAIN_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DOMAIN_LIST ::= STATE_CONS_SECTION DOMAIN_LIST 
            {
              ArrayList RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList s = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.addAll(s); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*DOMAIN_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DOMAIN_LIST ::= REW_SECTION DOMAIN_LIST 
            {
              ArrayList RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.REWARD_DEF r = (RDDL.REWARD_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,r);  RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*DOMAIN_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DOMAIN_LIST ::= CPF_SECTION DOMAIN_LIST 
            {
              ArrayList RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList c = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.addAll(c); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*DOMAIN_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DOMAIN_LIST ::= PVAR_SECTION DOMAIN_LIST 
            {
              ArrayList RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList p = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.addAll(p); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*DOMAIN_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DOMAIN_LIST ::= TYPE_SECTION DOMAIN_LIST 
            {
              ArrayList RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList t = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.addAll(t); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*DOMAIN_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // REQ_SECTION ::= REQUIREMENTS LCURLY RCURLY SEMI 
            {
              RDDL.DOMAIN RESULT = null;
		 RESULT = new RDDL.DOMAIN(new ArrayList()); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*REQ_SECTION*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // REQ_SECTION ::= REQUIREMENTS LCURLY STRING_LIST RCURLY SEMI 
            {
              RDDL.DOMAIN RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.DOMAIN(list); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*REQ_SECTION*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // REQ_SECTION ::= REQUIREMENTS ASSIGN_EQUAL LCURLY RCURLY SEMI 
            {
              RDDL.DOMAIN RESULT = null;
		 RESULT = new RDDL.DOMAIN(new ArrayList()); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*REQ_SECTION*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // REQ_SECTION ::= REQUIREMENTS ASSIGN_EQUAL LCURLY STRING_LIST RCURLY SEMI 
            {
              RDDL.DOMAIN RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.DOMAIN(list); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*REQ_SECTION*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DOMAIN_BLOCK ::= DOMAIN IDENT LCURLY DOMAIN_LIST RCURLY 
            {
              RDDL.DOMAIN RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RDDL.DOMAIN domain = new RDDL.DOMAIN(new ArrayList()); domain.setName(name); domain.addDefs(list); RESULT = domain; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*DOMAIN_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DOMAIN_BLOCK ::= DOMAIN IDENT LCURLY REQ_SECTION DOMAIN_LIST RCURLY 
            {
              RDDL.DOMAIN RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.DOMAIN domain = (RDDL.DOMAIN)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 domain.setName(name); domain.addDefs(list); RESULT = domain; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*DOMAIN_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // RDDL_BLOCK ::= NONFLUENT_BLOCK 
            {
              RDDL RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.NONFLUENTS n = (RDDL.NONFLUENTS)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RDDL rddl = new RDDL(); rddl.addNonFluents(n); RESULT = rddl; 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*RDDL_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // RDDL_BLOCK ::= INSTANCE_BLOCK 
            {
              RDDL RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.INSTANCE i = (RDDL.INSTANCE)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RDDL rddl = new RDDL(); rddl.addInstance(i); RESULT = rddl; 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*RDDL_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // RDDL_BLOCK ::= DOMAIN_BLOCK 
            {
              RDDL RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.DOMAIN d = (RDDL.DOMAIN)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RDDL rddl = new RDDL(); rddl.addDomain(d); RESULT = rddl; 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*RDDL_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // RDDL_BLOCK ::= NONFLUENT_BLOCK RDDL_BLOCK 
            {
              RDDL RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.NONFLUENTS n = (RDDL.NONFLUENTS)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rddlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rddlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL rddl = (RDDL)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 rddl.addNonFluents(n); RESULT = rddl; 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*RDDL_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // RDDL_BLOCK ::= INSTANCE_BLOCK RDDL_BLOCK 
            {
              RDDL RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.INSTANCE i = (RDDL.INSTANCE)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rddlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rddlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL rddl = (RDDL)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 rddl.addInstance(i); RESULT = rddl; 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*RDDL_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // RDDL_BLOCK ::= DOMAIN_BLOCK RDDL_BLOCK 
            {
              RDDL RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.DOMAIN d = (RDDL.DOMAIN)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rddlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rddlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL rddl = (RDDL)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 rddl.addDomain(d);   RESULT = rddl; 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*RDDL_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= RDDL_BLOCK EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL start_val = (RDDL)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

